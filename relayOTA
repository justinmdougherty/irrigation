// Include the necessary libraries
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <AsyncElegantOTA.h>
#include <ArduinoJson.h>
#include "time.h"

void processScheduleData();

 // local port to listen for UDP packets
WiFiUDP Udp;
unsigned int localPort = 8888;  // local port to listen for UDP packets

// Set to true to define Relay as Normally Open (NO)
#define RELAY_NO true

// Set number of relays
#define NUM_RELAYS 4

// Assign each GPIO to a relay
int relayGPIOs[NUM_RELAYS] = { 27, 26, 25, 33 };

// Replace with your network credentials
const char* ssid = "Fios";
const char* password = "JustinJamie11!!";

// NTP Servers:
//IPAddress timeServer(132, 163, 4, 101); // time-a.timefreq.bldrdoc.gov
IPAddress timeServer(15, 204, 21, 148);  // 0.us.pool.ntp.org
// IPAddress timeServer(132, 163, 4, 102); // time-b.timefreq.bldrdoc.gov
// IPAddress timeServer(132, 163, 4, 103); // time-c.timefreq.bldrdoc.gov


//const int timeZone = 1;     // Central European Time
//const int timeZone = -5;  // Eastern Standard Time (USA)
const int timeZone = -4;  // Eastern Daylight Time (USA)
//const int timeZone = -8;  // Pacific Standard Time (USA)
//const int timeZone = -7;  // Pacific Daylight Time (USA)

const char* PARAM_INPUT_1 = "relay";
const char* PARAM_INPUT_2 = "state";


// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <title>Irrigation</title>  
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    html {font-family: Arial; display: inline-block; text-align: center; color: white;}
    h2 {font-size: 3.0rem;}
    h3 {font-size: 2.0rem;}
    p {font-size: 3.0rem;}
    body {max-width: 600px; margin:0px auto; padding-bottom: 25px; background-color: #000;}
    .switch {position: relative; display: inline-block; width: 120px; height: 68px} 
    .switch input {display: none}
    .slider {position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: #fff; border-radius: 34px}
    .slider:before {position: absolute; content: ""; height: 52px; width: 52px; left: 8px; bottom: 8px; background-color: #666; -webkit-transition: .4s; transition: .4s; border-radius: 68px}
    input:checked+.slider {background-color: #2196F3}
    input:checked+.slider:before {-webkit-transform: translateX(52px); -ms-transform: translateX(52px); transform: translateX(52px)}
  </style>
</head>
<body>
  <h2>Irrigation Web Server</h2>
  <h3>9227 Arcadia Dr</h3>
  %BUTTONPLACEHOLDER1%
<script>function toggleCheckbox(element) {
  var xhr = new XMLHttpRequest();
  if(element.checked){ xhr.open("GET", "/updates?relay="+element.id+"&state=1", true); }
  else { xhr.open("GET", "/updates?relay="+element.id+"&state=0", true); }
  xhr.send();
}</script>
</body>
</html>
)rawliteral";

// Replaces placeholder with button section in your web page
String processor(const String& var) {
  //Serial.println(var);
  if (var == "BUTTONPLACEHOLDER1") {
    String buttons = "";
    for (int i = 1; i <= NUM_RELAYS; i++) {
      String relayStateValue = relayState(i);
      buttons += "<h4>Zone #" + String(i) + "</h4><label class=\"switch\"><input type=\"checkbox\" onchange=\"toggleCheckbox(this)\" id=\"" + String(i) + "\" " + relayStateValue + "><span class=\"slider\"></span></label>";
    }
    return buttons;
  }
  return String();
}

String relayState(int numRelay) {
  if (RELAY_NO) {
    if (digitalRead(relayGPIOs[numRelay - 1])) {
      return "";
    } else {
      return "checked";
    }
  } else {
    if (digitalRead(relayGPIOs[numRelay - 1])) {
      return "checked";
    } else {
      return "";
    }
  }
  return "";
}




void setup() {
  // Your existing setup code goes here
   // Serial port for debugging purposes
  Serial.begin(115200);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  // Print ESP32 Local IP Address
  Serial.println(WiFi.localIP());

  // Start UDP
  Udp.begin(localPort);
  Serial.print("Local port: ");
  Serial.println(Udp.localPort());

  // Start ElegantOTA
  AsyncElegantOTA.begin(&server);    // Start ElegantOTA

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/index.html", "text/html");
  });

  // Send a GET request to <ESP_IP>/get?relay=<inputMessage>
  server.on("/get", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage;
    String inputParam;

    // GET relay1 status on <ESP_IP>/get?relay=relay1
    if (request->hasParam(PARAM_INPUT_1)) {
      inputMessage = request->getParam(PARAM_INPUT_1)->value();
      if (inputMessage == "relay1") {
        inputParam = digitalRead(relayGPIOs[0]) ? "ON" : "OFF";
      }
      else if (inputMessage == "relay2") {
        inputParam = digitalRead(relayGPIOs[1]) ? "ON" : "OFF";
      }
      else if (inputMessage == "relay3") {
        inputParam = digitalRead(relayGPIOs[2]) ? "ON" : "OFF";
      }
      else if (inputMessage == "relay4") {
        inputParam = digitalRead(relayGPIOs[3]) ? "ON" : "OFF";
      }
      else {
        inputParam = "Invalid relay";
      }
    }
    else {
      inputParam = "No message sent";
    }
    // Send status message back to client
    request->send(200, "text/plain", inputParam);
  });

  // Send a GET request to <ESP_IP>/set?relay=<inputMessage>&state=<inputMessage>
  server.on("/set", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage;
    String inputParam;

    // GET relay1 status on <ESP_IP>/set?relay=relay1&state=on
    if (request->hasParam(PARAM_INPUT_1) && request->hasParam(PARAM_INPUT_2)) {
      inputMessage = request->getParam(PARAM_INPUT_1)->value();
      if (inputMessage == "relay1") {
        inputParam = request->getParam(PARAM_INPUT_2)->value();
        if (inputParam == "on") {
          digitalWrite(relayGPIOs[0], RELAY_NO ? LOW : HIGH);
        }
        else if (inputParam == "off") {
          digitalWrite(relayGPIOs[0], RELAY_NO ? HIGH : LOW);
        }
        else {
          inputParam = "Invalid state";
        }
      }
      else if (inputMessage == "relay2") {
        inputParam = request->getParam(PARAM_INPUT_2)->value();
        if (inputParam == "on") {
          digitalWrite(relayGPIOs[1], RELAY_NO ? LOW : HIGH);
        }
        else if (inputParam == "off") {
          digitalWrite(relayGPIOs[1], RELAY_NO ? HIGH : LOW);
        }
        else {
          inputParam = "Invalid state";
        }
      }
      else if (inputMessage == "relay3") {
        inputParam = request->getParam(PARAM_INPUT_2)->value();
        if (inputParam == "on") {
          digitalWrite(relayGPIOs[2], RELAY_NO ? LOW : HIGH);
        }
        else if (inputParam == "off") {
          digitalWrite(relayGPIOs[2], RELAY_NO ? HIGH : LOW);
        }
        else {
          inputParam = "Invalid state";
        }
      }
      else if (inputMessage == "relay4") {
        inputParam = request->getParam(PARAM_INPUT_2)->value();
        if (inputParam == "on") {
          digitalWrite(relayGPIOs[3], RELAY_NO ? LOW : HIGH);
        }
        else if (inputParam == "off") {
          digitalWrite(relayGPIOs[3], RELAY_NO ? HIGH : LOW);
        }
        else {
          inputParam = "Invalid state";
        }
      }
      else {
        inputParam = "Invalid relay";

      }

    }
    else {
      inputParam = "No message sent";
    }
    // Send status message back to client
    request->send(200, "text/plain", inputParam);
  });

  // Start server
  server.begin();
}


  // Configure the new route for handling scheduling data
  server.on("/schedule", HTTP_POST, [](AsyncWebServerRequest *request) {
    String message;
    if (request->hasParam("scheduleData", true)) {
      message = request->getParam("scheduleData", true)->value();
      processScheduleData(message);
    } else {
      message = "No schedule data received";
    }
    request->send(200, "text/plain", message);
  });


void processScheduleData(String data) {
  StaticJsonDocument<1024> doc;
  deserializeJson(doc, data);

  // Parse the received data and store it in appropriate variables
  // For example:
  int cycleLength = doc["cycleLength"];
  String startTime = doc["startTime"];
  JsonArray daysOfWeek = doc["daysOfWeek"];
  // ... and so on for the interval-based watering functionality

  // Save the schedule data in non-volatile memory (EEPROM or SPIFFS)

  // Implement the scheduling functionality based on the received data and the current time
}

// Your existing loop and other code goes here
