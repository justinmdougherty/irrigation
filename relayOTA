
#include "ESPAsyncWebServer.h"
#include <WiFi.h>
#include <WiFiUdp.h>
#include <AsyncTCP.h>
#include <AsyncElegantOTA.h>    
#include <Time.h>               
#include <EEPROM.h>

// Replace with your network credentials
const char* ssid = "Fios";
const char* password = "JustinJamie11!!";

unsigned long nextIrrigationTime = 0;
int frequencyIndex = 0;

AsyncWebServer server(80);

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Irrigation Control</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    /* CSS for the switch slider */
    .switch {
      position: relative;
      display: inline-block;
      width: 60px;
      height: 34px;
    }
    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      -webkit-transition: .4s;
      transition: .4s;
    }
    .slider:before {
      position: absolute;
      content: "";
      height: 26px;
      width: 26px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      -webkit-transition: .4s;
      transition: .4s;
    }
    input:checked + .slider {
      background-color: #2196F3;
    }
    input:focus + .slider {
      box-shadow: 0 0 1px #2196F3;
    }
    input:checked + .slider:before {
      -webkit-transform: translateX(26px);
      -ms-transform: translateX(26px);
      transform: translateX(26px);
    }
  </style>
</head>
<body>
  <h1>Irrigation Control</h1>
  
  <form method="POST" action="/schedule">
    <label for="cycle-time">Cycle Time (in minutes):</label>
    <input type="text" id="cycle-time" name="cycle-time"><br><br>
    
    <label for="frequency">Frequency:</label>
    <select id="frequency" name="frequency">
      <option value="every-hour">Every Hour</option>
      <option value="every-day">Every Day</option>
      <option value="every-week">Every Week</option>
    </select><br><br>
    
    <input type="submit" value="Save Schedule">
  </form>
  
  <table>
    <thead>
      <tr>
        <th>Zone</th>
        <th>Activation</th>
        <th>Cycle Time</th>
        <th>Enabled</th>
      </tr>
    </thead>
    <tbody>
      {% for zone_num in range(num_zones) %}
      <tr>
        <td>{{zone_num}}</td>
        <td>
          <label class="switch">
            <input type="checkbox" id="zone-{{zone_num}}" name="zone-{{zone_num}}" onchange="activateZone({{zone_num}})" {{zone_active}}>
            <span class="slider"></span>
          </label>
        </td>
        <td>{{cycle_time}} minutes</td>
        <td>
          <label class="switch">
            <input type="checkbox" id="zone-enable-{{zone_num}}" name="zone-enable-{{zone_num}}" onchange="enableZoneSchedule({{

              zone_num}})" {{zone_enabled}}>
<span class="slider"></span>
</label>
</td>
</tr>
{% endfor %}
</tbody>

  </table>
  <script>
    // function to send schedule data to server
    function saveSchedule() {
      var cycleTime = document.getElementById("cycle-time").value;
      var frequency = document.getElementById("frequency").value;
      var xhttp = new XMLHttpRequest();
      xhttp.open("POST", "/schedule", true);
      xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      xhttp.send("cycle_time=" + cycleTime + "&frequency=" + frequency);
    }
    
    // function to enable/disable zone schedule
    function enableZoneSchedule(zone_num) {
      var xhttp = new XMLHttpRequest();
      xhttp.open("POST", "/zone-enable/" + zone_num, true);
      xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      var enabled = document.getElementById("zone-enable-" + zone_num).checked;
      xhttp.send("enabled=" + enabled);
    }
  </script>
</body>
</html>
)rawliteral";

// define irrigation parameters
const int numZones = 4;
const int irrigationDuration = 10;
const int zonePins[numZones] = { 27, 26, 25, 33 };
volatile int currentZone = 0;
volatile bool irrigationEnabled = false;

// define timer for irrigation cycles
hw_timer_t * timer = NULL;
int cycleTime = 60;
String frequency = "daily";

void irrigationISR();

void setup() {
  Serial.begin(115200);
  
  // initialize zone pins as outputs
  for (int i = 0; i < numZones; i++) {
    pinMode(zonePins[i], OUTPUT);
    digitalWrite(zonePins[i], HIGH);
  }

  // read cycle time and frequency from non-volatile memory
  EEPROM.begin(512);
  EEPROM.get(0, cycleTime);
  EEPROM.get(4, frequency);
  EEPROM.end();
  
  // set up timer interrupt to trigger irrigation cycles
  timer = timerBegin(0, 80, true);
  timerAttachInterrupt(timer, &irrigationISR, true);
  timerAlarmWrite(timer, cycleTime * 1000 * 60, true);
  timerAlarmEnable(timer);

  // set up web server
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/html", index_html);
  });
  
  server.on("/update", HTTP_POST, [](AsyncWebServerRequest *request){
    String zone = request->getParam("zone")->value();
    String state = request->getParam("state")->value();
    
    if (zone == "all") {
      for (int i = 0; i < numZones; i++) {
        digitalWrite(zonePins[i], state == "on" ? LOW : HIGH);
      }
    }
    else {
      int zoneIndex = zone.toInt() - 1;
      if (zoneIndex >= 0 && zoneIndex < numZones) {
        digitalWrite(zonePins[zoneIndex], state == "on" ? LOW : HIGH);
      }
    }
    
    request->send(200, "text/html", "OK");
  });

  server.on("/schedule", HTTP_POST, [](AsyncWebServerRequest *request){
    String cycleTimeStr = request->getParam("cycle-time")->value();
    int cycleTime = cycleTimeStr.toInt();
    String frequency = request->getParam("frequency")->value();
    
    // save cycle time and frequency to non-volatile memory
    EEPROM.begin(512);
    EEPROM.put(0, cycleTime);
    EEPROM.put(4, frequency);
    EEPROM.commit();
    EEPROM.end();
    
    // update timer alarm
    timerAlarmWrite(timer, cycleTime * 1000 * 60, true);
    
    request->send(200, "text/html", "Schedule Saved");
  });
  
  server.begin();
   AsyncElegantOTA.begin(&server);
}

void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    AsyncElegantOTA.loop();
     
    irrigationCheck();
    
    WiFiClient client = server.available();
    if (client) {
      server.handleClient(client);
    }
  } else {
    connectToWiFi();
  }

// check if it's time to start the next irrigation cycle
  if (irrigationEnabled && millis() >= nextIrrigationTime) {
    // start irrigation cycle
    currentZone = 0;
    irrigationEnabled = true;
    
    // calculate time until next irrigation cycle
    switch (frequencyIndex) {
      case 0: // Every 3 hours
        nextIrrigationTime = millis() + 3 * 60 * 60 * 1000;
        break;
      case 1: // Every 6 hours
        nextIrrigationTime = millis() + 6 * 60 * 60 * 1000;
        break;
      case 2: // Every 12 hours
        nextIrrigationTime = millis() + 12 * 60 * 60 * 1000;
        break;
      case 3: // Every 24 hours
        nextIrrigationTime = millis() + 24 * 60 * 60 * 1000;
        break;
      case 4: // Every 2 days
        nextIrrigationTime = millis() + 2 * 24 * 60 * 60 * 1000;
        break;
      case 5: // Every 3 days
        nextIrrigationTime = millis() + 3 * 24 * 60 * 60 * 1000;
        break;
      case 6: // Every 7 days
        nextIrrigationTime = millis() + 7 * 24 * 60 * 60 * 1000;
        break;
      default: // shouldn't happen
        nextIrrigationTime = millis() + 24 * 60 * 60 * 1000;
        break;
    }
  }
}

void handleZoneChange(AsyncWebServerRequest *request, int zoneIndex) {
  String state = request->getParam("state")->value();
  
  // toggle zone state
  if (state == "on") {
    digitalWrite(zonePins[zoneIndex], LOW);
  } else {
    digitalWrite(zonePins[zoneIndex], HIGH);
  }
  
  request->send(200, "text/html", "Zone state updated");
}

void handleScheduleSave(AsyncWebServerRequest *request) {
  String cycleTimeStr = request->getParam("cycle-time")->value();
  int cycleTime = cycleTimeStr.toInt();
  String frequency = request->getParam("frequency")->value();
  
  // save cycle time and frequency to non-volatile memory
  // e.g. EEPROM.put(0, cycleTime); EEPROM.put(4, frequency);
  
  request->send(200, "text/html", "Schedule Saved");
}

void handleScheduleEnable(AsyncWebServerRequest *request) {
  String state = request->getParam("state")->value();
  
  // toggle irrigationEnabled state
  if (state == "on") {
    irrigationEnabled = true;
  } else {
    irrigationEnabled = false;
  }
  
  request->send(200, "text/html", "Schedule Enabled state updated");
}

void irrigationISR() {
  if (irrigationEnabled) {
    // activate irrigation zone
    digitalWrite(zonePins[currentZone], LOW);
    delay(1000 * irrigationDuration);
    digitalWrite(zonePins[currentZone], HIGH);
    
    // advance to next zone
    currentZone = (currentZone + 1) % numZones;
  }
}



