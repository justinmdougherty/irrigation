// Include the necessary libraries
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <AsyncElegantOTA.h>
#include <ArduinoJson.h>
#include "time.h"

void processScheduleData();

 // local port to listen for UDP packets
WiFiUDP Udp;
unsigned int localPort = 8888;  // local port to listen for UDP packets

// Set to true to define Relay as Normally Open (NO)
#define RELAY_NO true

// Set number of relays
#define NUM_RELAYS 4

// Assign each GPIO to a relay
int relayGPIOs[NUM_RELAYS] = { 27, 26, 25, 33 };

// Replace with your network credentials
const char* ssid = "Fios";
const char* password = "JustinJamie11!!";

// NTP Servers:
//IPAddress timeServer(132, 163, 4, 101); // time-a.timefreq.bldrdoc.gov
IPAddress timeServer(15, 204, 21, 148);  // 0.us.pool.ntp.org
// IPAddress timeServer(132, 163, 4, 102); // time-b.timefreq.bldrdoc.gov
// IPAddress timeServer(132, 163, 4, 103); // time-c.timefreq.bldrdoc.gov


//const int timeZone = 1;     // Central European Time
//const int timeZone = -5;  // Eastern Standard Time (USA)
const int timeZone = -4;  // Eastern Daylight Time (USA)
//const int timeZone = -8;  // Pacific Standard Time (USA)
//const int timeZone = -7;  // Pacific Daylight Time (USA)

const char* PARAM_INPUT_1 = "relay";
const char* PARAM_INPUT_2 = "state";


// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <title>Irrigation</title>  
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    html {font-family: Arial; display: inline-block; text-align: center; color: white;}
    h2 {font-size: 3.0rem;}
    h3 {font-size: 2.0rem;}
    p {font-size: 3.0rem;}
    body {max-width: 600px; margin:0px auto; padding-bottom: 25px; background-color: #000;}
    .switch {position: relative; display: inline-block; width: 120px; height: 68px} 
    .switch input {display: none}
    .slider {position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: #fff; border-radius: 34px}
    .slider:before {position: absolute; content: ""; height: 52px; width: 52px; left: 8px; bottom: 8px; background-color: #666; -webkit-transition: .4s; transition: .4s; border-radius: 68px}
    input:checked+.slider {background-color: #2196F3}
    input:checked+.slider:before {-webkit-transform: translateX(52px); -ms-transform: translateX(52px); transform: translateX(52px)}
  </style>
</head>
<body>
  <h2>Irrigation Web Server</h2>
  <h3>9227 Arcadia Dr</h3>
<input type="number" id="cycleLength" placeholder="Cycle Length (minutes)">
<input type="time" id="startTime" placeholder="Start Time">
<button onclick="setSchedule()">Set Schedule</button>
  %BUTTONPLACEHOLDER1%
<script>function toggleCheckbox(element) {
  var xhr = new XMLHttpRequest();
  if(element.checked){ xhr.open("GET", "/updates?relay="+element.id+"&state=1", true); }
  else { xhr.open("GET", "/updates?relay="+element.id+"&state=0", true); }
  xhr.send();
}</script>

<script>
  // ... Your existing script

  function setSchedule() {
    var xhr = new XMLHttpRequest();
    var cycleLength = document.getElementById("cycleLength").value;
    var startTime = document.getElementById("startTime").value;
    var data = {
      cycleLength: cycleLength,
      startTime: startTime
    };

    xhr.open("POST", "/schedule", true);
    xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
    xhr.send(JSON.stringify(data));
  }
</script>
</body>
</html>
)rawliteral";

// Replaces placeholder with button section in your web page
String processor(const String& var) {
  //Serial.println(var);
  if (var == "BUTTONPLACEHOLDER1") {
    String buttons = "";
    for (int i = 1; i <= NUM_RELAYS; i++) {
      String relayStateValue = relayState(i);
      buttons += "<h4>Zone #" + String(i) + "</h4><label class=\"switch\"><input type=\"checkbox\" onchange=\"toggleCheckbox(this)\" id=\"" + String(i) + "\" " + relayStateValue + "><span class=\"slider\"></span></label>";
    }
    return buttons;
  }
  return String();
}

String relayState(int numRelay) {
  if (RELAY_NO) {
    if (digitalRead(relayGPIOs[numRelay - 1])) {
      return "";
    } else {
      return "checked";
    }
  } else {
    if (digitalRead(relayGPIOs[numRelay - 1])) {
      return "checked";
    } else {
      return "";
    }
  }
  return "";
}




void setup() {
  // Your existing setup code goes here
   // Serial port for debugging purposes
  Serial.begin(115200);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  // Print ESP32 Local IP Address
  Serial.println(WiFi.localIP());

  // Start UDP
  Udp.begin(localPort);
  Serial.print("Local port: ");
  Serial.println(Udp.localPort());

  // Start ElegantOTA
  AsyncElegantOTA.begin(&server);    // Start ElegantOTA

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/index.html", "text/html");
  });

  // Send a GET request to <ESP_IP>/get?relay=<inputMessage>
  server.on("/get", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage;
    String inputParam;

    // GET relay1 status on <ESP_IP>/get?relay=relay1
    if (request->hasParam(PARAM_INPUT_1)) {
      inputMessage = request->getParam(PARAM_INPUT_1)->value();
      if (inputMessage == "relay1") {
        inputParam = digitalRead(relayGPIOs[0]) ? "ON" : "OFF";
      }
      else if (inputMessage == "relay2") {
        inputParam = digitalRead(relayGPIOs[1]) ? "ON" : "OFF";
      }
      else if (inputMessage == "relay3") {
        inputParam = digitalRead(relayGPIOs[2]) ? "ON" : "OFF";
      }
      else if (inputMessage == "relay4") {
        inputParam = digitalRead(relayGPIOs[3]) ? "ON" : "OFF";
      }
      else {
        inputParam = "Invalid relay";
      }
    }
    else {
      inputParam = "No message sent";
    }
    // Send status message back to client
    request->send(200, "text/plain", inputParam);
  });

  // Send a GET request to <ESP_IP>/set?relay=<inputMessage>&state=<inputMessage>
  server.on("/set", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage;
    String inputParam;

    // GET relay1 status on <ESP_IP>/set?relay=relay1&state=on
    if (request->hasParam(PARAM_INPUT_1) && request->hasParam(PARAM_INPUT_2)) {
      inputMessage = request->getParam(PARAM_INPUT_1)->value();
      if (inputMessage == "relay1") {
        inputParam = request->getParam(PARAM_INPUT_2)->value();
        if (inputParam == "on") {
          digitalWrite(relayGPIOs[0], RELAY_NO ? LOW : HIGH);
        }
        else if (inputParam == "off") {
          digitalWrite(relayGPIOs[0], RELAY_NO ? HIGH : LOW);
        }
        else {
          inputParam = "Invalid state";
        }
      }
      else if (inputMessage == "relay2") {
        inputParam = request->getParam(PARAM_INPUT_2)->value();
        if (inputParam == "on") {
          digitalWrite(relayGPIOs[1], RELAY_NO ? LOW : HIGH);
        }
        else if (inputParam == "off") {
          digitalWrite(relayGPIOs[1], RELAY_NO ? HIGH : LOW);
        }
        else {
          inputParam = "Invalid state";
        }
      }
      else if (inputMessage == "relay3") {
        inputParam = request->getParam(PARAM_INPUT_2)->value();
        if (inputParam == "on") {
          digitalWrite(relayGPIOs[2], RELAY_NO ? LOW : HIGH);
        }
        else if (inputParam == "off") {
          digitalWrite(relayGPIOs[2], RELAY_NO ? HIGH : LOW);
        }
        else {
          inputParam = "Invalid state";
        }
      }
      else if (inputMessage == "relay4") {
        inputParam = request->getParam(PARAM_INPUT_2)->value();
        if (inputParam == "on") {
          digitalWrite(relayGPIOs[3], RELAY_NO ? LOW : HIGH);
        }
        else if (inputParam == "off") {
          digitalWrite(relayGPIOs[3], RELAY_NO ? HIGH : LOW);
        }
        else {
          inputParam = "Invalid state";
        }
      }
      else {
        inputParam = "Invalid relay";

      }

    }
    else {
      inputParam = "No message sent";
    }
    // Send status message back to client
    request->send(200, "text/plain", inputParam);
  });

  // Start server
  server.begin();
}

void loop () 

{
  // Your existing loop code goes here
  AsyncElegantOTA.loop();
  // Check if there's data available
  int packetSize = Udp.parsePacket();
  if (packetSize) {
    // Receive incoming UDP packets
    Serial.print("Received packet of size ");
    Serial.println(packetSize);
    Serial.print("From ");
    IPAddress remote = Udp.remoteIP();
    Serial.print(remote);
    Serial.print(", port ");
    Serial.println(Udp.remotePort());

    // Read the packet into packetBufffer
    Udp.read(packetBuffer, UDP_TX_PACKET_MAX_SIZE);
    Serial.println("Contents:");
    Serial.println(packetBuffer);

    // Process the packet
    processPacket(packetBuffer);
  }
  delay(1000);

    // Implement the scheduling functionality based on the received data and the current time
  if (scheduleDataReceived) {
    // Get the current time
    time_t now = time(nullptr);
    // Get the current hour and minute
    int currentHour = hour(now);
    int currentMinute = minute(now);
    // Check if the current time matches the scheduled time
    if (currentHour == scheduledHour && currentMinute == scheduledMinute) {
      // Check if the scheduled action is to turn on the relay
      if (scheduledAction == "on") {
        // Turn on the relay
        digitalWrite(relayGPIOs[scheduledRelay - 1], RELAY_NO ? LOW : HIGH);
      } else {
        // Turn off the relay
        digitalWrite(relayGPIOs[scheduledRelay - 1], RELAY_NO ? HIGH : LOW);
      }
      // Reset the flag
      scheduleDataReceived = false;
    }
  }

    // Check if the stored schedule data indicates it's time to start the irrigation cycle
  // If so, run the irrigation cycle for the specified duration
  if (scheduleDataReceived) {
    // Get the current time
    time_t now = time(nullptr);
    // Get the current hour and minute
    int currentHour = hour(now);
    int currentMinute = minute(now);
    // Check if the current time matches the scheduled time
    if (currentHour == scheduledHour && currentMinute == scheduledMinute) {
      // Check if the scheduled action is to turn on the relay
      if (scheduledAction == "on") {
        // Turn on the relay
        digitalWrite(relayGPIOs[scheduledRelay - 1], RELAY_NO ? LOW : HIGH);
        // Start the irrigation cycle timer
        irrigationCycleTimer = millis();
      } else {
        // Turn off the relay
        digitalWrite(relayGPIOs[scheduledRelay - 1], RELAY_NO ? HIGH : LOW);
      }
      // Reset the flag
      scheduleDataReceived = false;
    }
  }
  // Check if the irrigation cycle timer is running
  if (irrigationCycleTimer > 0) {
    // Check if the irrigation cycle has completed
    if (millis() - irrigationCycleTimer > scheduledDuration * 1000) {
      // Turn off the relay
      digitalWrite(relayGPIOs[scheduledRelay - 1], RELAY_NO ? HIGH : LOW);
      // Reset the irrigation cycle timer
      irrigationCycleTimer = 0;
    }
  }


}
  // Configure the new route for handling scheduling data
  server.on("/schedule", HTTP_POST, [](AsyncWebServerRequest *request) {
    String message;
    if (request->hasParam("scheduleData", true)) {
      message = request->getParam("scheduleData", true)->value();
      processScheduleData(message);
    } else {
      message = "No schedule data received";
    }
    request->send(200, "text/plain", message);
  });


void handleNotFound(AsyncWebServerRequest *request) {
  if (request->url() == "/schedule" && request->method() == HTTP_POST) {
    if (request->contentType() == "application/json") {
      processScheduleData(request->arg("plain"));
      request->send(200, "text/plain", "OK");
    } else {
      request->send(400, "text/plain", "Missing POST data");
    }
  } else {
    request->send(404, "text/plain", "Not found");
  }
}

void processScheduleData(String data) {
  StaticJsonDocument<1024> doc;
  deserializeJson(doc, data);

  // Parse the received data and store it in appropriate variables
  // For example:
  int cycleLength = doc["cycleLength"];
  String startTime = doc["startTime"];
  JsonArray daysOfWeek = doc["daysOfWeek"];
  JsonArray intervals = doc["intervals"];

  // ... and so on for the interval-based watering functionality

  // Save the schedule data in non-volatile memory SPIFFS
  File file = SPIFFS.open("/schedule.json", "w");
  if (!file) {
    Serial.println("Failed to open file for writing");
    return;
  }
  serializeJson(doc, file);
  file.close();

}


//*-------- NTP code ----------*/

void UpdateNTP() {
  Serial.println("TimeNTP Example");
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.print("IP number assigned by DHCP is ");
  Serial.println(WiFi.localIP());

  Serial.println("Starting UDP");
  Udp.begin(localPort);
  Serial.print("Local port: ");
  //Serial.println(Udp.localPort());
  Serial.println("waiting for sync");
  setSyncProvider(getNtpTime);
}

const int NTP_PACKET_SIZE = 48;      // NTP time is in the first 48 bytes of message
byte packetBuffer[NTP_PACKET_SIZE];  //buffer to hold incoming & outgoing packets

time_t getNtpTime() {
  while (Udp.parsePacket() > 0)
    ;  // discard any previously received packets
  Serial.println("Transmit NTP Request");
  sendNTPpacket(timeServer);
  uint32_t beginWait = millis();
  while (millis() - beginWait < 1500) {
    int size = Udp.parsePacket();
    if (size >= NTP_PACKET_SIZE) {
      Serial.println("Receive NTP Response");
      Udp.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
      unsigned long secsSince1900;
      // convert four bytes starting at location 40 to a long integer
      secsSince1900 = (unsigned long)packetBuffer[40] << 24;
      secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
      secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
      secsSince1900 |= (unsigned long)packetBuffer[43];
      return secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR;
    }
  }
  Serial.println("No NTP Response :-(");
  return 0;  // return 0 if unable to get the time
}

// send an NTP request to the time server at the given address
void sendNTPpacket(IPAddress& address) {
  // set all bytes in the buffer to 0
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  packetBuffer[0] = 0b11100011;  // LI, Version, Mode
  packetBuffer[1] = 0;           // Stratum, or type of clock
  packetBuffer[2] = 6;           // Polling Interval
  packetBuffer[3] = 0xEC;        // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  packetBuffer[12] = 49;
  packetBuffer[13] = 0x4E;
  packetBuffer[14] = 49;
  packetBuffer[15] = 52;
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  Udp.beginPacket(address, 123);  //NTP requests are to port 123
  Udp.write(packetBuffer, NTP_PACKET_SIZE);
  Udp.endPacket();
}
