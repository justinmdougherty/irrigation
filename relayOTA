// Import required libraries
#include <TimeAlarms.h>         //
#include <WiFi.h>               //
#include <AsyncTCP.h>           //
#include <ESPAsyncWebServer.h>  //
#include <AsyncElegantOTA.h>    //
#include <TimeLib.h>            //
#include <Time.h>               //
#include <WiFiUdp.h>

#define relayAlarm1 27
#define relayAlarm2 26
#define relayAlarm3 25
#define relayAlarm4 33


void runSchedule();
void digitalClockDisplay();


WiFiUDP Udp;
unsigned int localPort = 8888;  // local port to listen for UDP packets

// Set to true to define Relay as Normally Open (NO)
#define RELAY_NO true

// Set number of relays
#define NUM_RELAYS 4


// Assign each GPIO to a relay
int relayGPIOs[NUM_RELAYS] = { 27, 26, 25, 33 };

// Replace with your network credentials
const char* ssid = "Fios";
const char* password = "JustinJamie11!!";

// NTP Servers:
//IPAddress timeServer(132, 163, 4, 101); // time-a.timefreq.bldrdoc.gov
IPAddress timeServer(15, 204, 21, 148);  // 0.us.pool.ntp.org
// IPAddress timeServer(132, 163, 4, 102); // time-b.timefreq.bldrdoc.gov
// IPAddress timeServer(132, 163, 4, 103); // time-c.timefreq.bldrdoc.gov


//const int timeZone = 1;     // Central European Time
//const int timeZone = -5;  // Eastern Standard Time (USA)
const int timeZone = -4;  // Eastern Daylight Time (USA)
//const int timeZone = -8;  // Pacific Standard Time (USA)
//const int timeZone = -7;  // Pacific Daylight Time (USA)

const char* PARAM_INPUT_1 = "relay";
const char* PARAM_INPUT_2 = "state";


// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Irrigation Control</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    /* CSS for the switch slider */
    .switch {
      position: relative;
      display: inline-block;
      width: 60px;
      height: 34px;
    }
    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      -webkit-transition: .4s;
      transition: .4s;
    }
    .slider:before {
      position: absolute;
      content: "";
      height: 26px;
      width: 26px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      -webkit-transition: .4s;
      transition: .4s;
    }
    input:checked + .slider {
      background-color: #2196F3;
    }
    input:focus + .slider {
      box-shadow: 0 0 1px #2196F3;
    }
    input:checked + .slider:before {
      -webkit-transform: translateX(26px);
      -ms-transform: translateX(26px);
      transform: translateX(26px);
    }
  </style>
</head>
<body>
  <h1>Irrigation Control</h1>
  
  <form method="POST" action="/schedule">
    <label for="cycle-time">Cycle Time (in minutes):</label>
    <input type="text" id="cycle-time" name="cycle-time"><br><br>
    
    <label for="frequency">Frequency:</label>
    <select id="frequency" name="frequency">
      <option value="every-hour">Every Hour</option>
      <option value="every-day">Every Day</option>
      <option value="every-week">Every Week</option>
    </select><br><br>
    
    <input type="submit" value="Save Schedule">
  </form>
  
  <table>
    <thead>
      <tr>
        <th>Zone</th>
        <th>Activation</th>
        <th>Cycle Time</th>
        <th>Enabled</th>
      </tr>
    </thead>
    <tbody>
      {% for zone_num in range(num_zones) %}
      <tr>
        <td>{{zone_num}}</td>
        <td>
          <label class="switch">
            <input type="checkbox" id="zone-{{zone_num}}" name="zone-{{zone_num}}" onchange="activateZone({{zone_num}})" {{zone_active}}>
            <span class="slider"></span>
          </label>
        </td>
        <td>{{cycle_time}} minutes</td>
        <td>
          <label class="switch">
            <input type="checkbox" id="zone-enable-{{zone_num}}" name="zone-enable-{{zone_num}}" onchange="enableZoneSchedule({{

              zone_num}})" {{zone_enabled}}>
<span class="slider"></span>
</label>
</td>
</tr>
{% endfor %}
</tbody>

  </table>
  <script>
    // function to send schedule data to server
    function saveSchedule() {
      var cycleTime = document.getElementById("cycle-time").value;
      var frequency = document.getElementById("frequency").value;
      var xhttp = new XMLHttpRequest();
      xhttp.open("POST", "/schedule", true);
      xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      xhttp.send("cycle_time=" + cycleTime + "&frequency=" + frequency);
    }
    
    // function to enable/disable zone schedule
    function enableZoneSchedule(zone_num) {
      var xhttp = new XMLHttpRequest();
      xhttp.open("POST", "/zone-enable/" + zone_num, true);
      xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      var enabled = document.getElementById("zone-enable-" + zone_num).checked;
      xhttp.send("enabled=" + enabled);
    }
  </script>
</body>
</html>
)rawliteral";


// Replaces placeholder with button section in your web page
String processor(const String& var) {
  //Serial.println(var);
  if (var == "BUTTONPLACEHOLDER1") {
    String buttons = "";
    for (int i = 1; i <= NUM_RELAYS; i++) {
      String relayStateValue = relayState(i);
      buttons += "<h4>Zone #" + String(i) + "</h4><label class=\"switch\"><input type=\"checkbox\" onchange=\"toggleCheckbox(this)\" id=\"" + String(i) + "\" " + relayStateValue + "><span class=\"slider\"></span></label>";
    }
    return buttons;
  }
  return String();
}

String relayState(int numRelay) {
  if (RELAY_NO) {
    if (digitalRead(relayGPIOs[numRelay - 1])) {
      return "";
    } else {
      return "checked";
    }
  } else {
    if (digitalRead(relayGPIOs[numRelay - 1])) {
      return "checked";
    } else {
      return "";
    }
  }
  return "";
}

void setup() {
  Serial.begin(115200);

  //Set current time at midnight
  UpdateNTP();
  Alarm.alarmRepeat(0, 0, 1, UpdateNTP);

  time_t prevDisplay = 0;  // when the digital clock was displayed

  // initialize zones
  for (int i = 0; i < numZones; i++) {
    zones[i].setPin(zonePins[i]);
    pinMode(zonePins[i], OUTPUT);
  }

  // initialize irrigation duration
  irrigationDuration = defaultIrrigationDuration;

  // read zone enabled/disabled state from non-volatile memory
  // e.g. for (int i = 0; i < numZones; i++) { EEPROM.get(8 + i, zones[i].isEnabled()); }

  // read cycle time and frequency from non-volatile memory
  // e.g. EEPROM.get(0, cycleTime); EEPROM.get(4, frequency);

  // set up timer interrupt to trigger irrigation cycles
  timer = timerBegin(0, 80, true);
  timerAttachInterrupt(timer, &irrigationISR, true);
  timerAlarmWrite(timer, cycleTime * 1000 * 60, true);
  timerAlarmEnable(timer);

  // serve the web interface
  server.on("/", HTTP_GET, [](AsyncWebServerRequest* request) {
    request->send_P(200, "text/html", index_html, processor);
  });

  // handle zone enable/disable requests
  server.on("/zone-enable/:num", HTTP_POST, [](AsyncWebServerRequest* request) {
    int zone_num = request->pathArg("num").toInt();
    bool enabled = request->getParam("enabled")->value().toInt();

    // set zone enabled/disabled in non-volatile memory
    // e.g. EEPROM.put(8 + zone_num, enabled);

    // send response to client
    request->send(200, "text/plain", "OK");

    // update zone state in case the schedule is currently running
    zones[zone_num].setEnabled(enabled);
  });

  // handle schedule save requests
  server.on("/schedule", HTTP_POST, [](AsyncWebServerRequest* request) {
    String cycleTimeStr = request->getParam("cycle-time")->value();
    int cycleTime = cycleTimeStr.toInt();
    String frequency = request->getParam("frequency")->value();

    // save cycle time and frequency to non-volatile memory
    // e.g. EEPROM.put(0, cycleTime); EEPROM.put(4, frequency);

    // send response to client
    request->send(200, "text/html", "Schedule Saved");
  });

  // start the web server
  server.begin();
  AsyncElegantOTA.begin(&server);
}


/*
void setup() {
  // Serial port for debugging purposes
  Serial.begin(115200);

  pinMode(relayAlarm1, OUTPUT);
  pinMode(relayAlarm2, OUTPUT);
  pinMode(relayAlarm3, OUTPUT);
  pinMode(relayAlarm4, OUTPUT);

  digitalWrite(relayAlarm1, HIGH);
  digitalWrite(relayAlarm2, HIGH);
  digitalWrite(relayAlarm3, HIGH);
  digitalWrite(relayAlarm4, HIGH);

  UpdateNTP();


  Alarm.alarmRepeat(0, 0, 1, UpdateNTP);

  time_t prevDisplay = 0;  // when the digital clock was displayed




  // Set all relays to off when the program starts - if set to Normally Open (NO), the relay is off when you set the relay to HIGH
  for (int i = 1; i <= NUM_RELAYS; i++) {
    pinMode(relayGPIOs[i - 1], OUTPUT);
    if (RELAY_NO) {
      digitalWrite(relayGPIOs[i - 1], HIGH);
    } else {
      digitalWrite(relayGPIOs[i - 1], LOW);
    }
  }

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  // Print ESP32 Local IP Address
  Serial.println(WiFi.localIP());

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest* request) {
    request->send_P(200, "text/html", index_html, processor);
  });


server.on("/schedule", HTTP_POST, [](AsyncWebServerRequest *request){
  String cycleTimeStr = request->getParam("cycle-time")->value();
  int cycleTime = cycleTimeStr.toInt();
  String frequency = request->getParam("frequency")->value();
  
  // save cycle time and frequency to non-volatile memory
  // e.g. EEPROM.put(0, cycleTime); EEPROM.put(4, frequency);

  // send response to client
  request->send(200, "text/html", "Schedule Saved");
});

server.on("/zone-enable/:num", HTTP_POST, [](AsyncWebServerRequest *request){
  int zone_num = request->pathArg("num").toInt();
  bool enabled = request->getParam("enabled")->value().toInt();

  // set zone enabled/disabled in non-volatile memory
  // e.g. EEPROM.put(8 + zone_num, enabled);

  // send response to client
  request->send(200, "text/plain", "OK");

  // update zone state in case the schedule is currently running
  zones[zone_num].setEnabled(enabled);
});

  //Send a GET request to <ESP_IP>/update?relay=<inputMessage>&state=<inputMessage2>
  server.on("/updates", HTTP_GET, [](AsyncWebServerRequest* request) {
    String inputMessage;
    String inputParam;
    String inputMessage2;
    String inputParam2;

    //GET input1 value on <ESP_IP>/update?relay=<inputMessage>
    if (request->hasParam(PARAM_INPUT_1) & request->hasParam(PARAM_INPUT_2)) {
      inputMessage = request->getParam(PARAM_INPUT_1)->value();
      inputParam = PARAM_INPUT_1;
      inputMessage2 = request->getParam(PARAM_INPUT_2)->value();
      inputParam2 = PARAM_INPUT_2;
      if (RELAY_NO) {
        Serial.print("NO ");
        digitalWrite(relayGPIOs[inputMessage.toInt() - 1], !inputMessage2.toInt());

      } else {
        Serial.print("NC ");
        digitalWrite(relayGPIOs[inputMessage.toInt() - 1], inputMessage2.toInt());
      }
    } else {
      inputMessage = "No message sent";
      inputParam = "none";
    }
    Serial.println(inputMessage + inputMessage2);
    request->send(200, "text/plain", "OK");
  });


  // Start server
  AsyncElegantOTA.begin(&server);
  server.begin();
}
*/


void runSchedule() {
  //***************************** Zone 1 Schedule *****************************************************
  Serial.println("Setting Schedule ");
  //Tue
  Alarm.alarmRepeat(dowTuesday, 15, 30, 0, Zone1On);   // every day at 06:00
  Alarm.alarmRepeat(dowTuesday, 15, 40, 0, Zone1Off);  // every day at 06:10

  //Thurs
  Alarm.alarmRepeat(dowThursday, 15, 30, 0, Zone1On);   // every day at 06:00
  Alarm.alarmRepeat(dowThursday, 15, 40, 0, Zone1Off);  // every day at 06:10

  //Sat
  Alarm.alarmRepeat(dowSaturday, 15, 30, 0, Zone1On);   // every day at 06:00
  Alarm.alarmRepeat(dowSaturday, 15, 40, 0, Zone1Off);  // every day at 06:10

  //Sun
  Alarm.alarmRepeat(dowSunday, 15, 30, 0, Zone1On);   // every day at 06:00
  Alarm.alarmRepeat(dowSunday, 15, 40, 0, Zone1Off);  // every day at 06:10

  //***************************** Zone 1 Schedule *****************************************************

  //***************************** Zone 2 Schedule *****************************************************

  //Tue
  Alarm.alarmRepeat(dowTuesday, 15, 40, 5, Zone2On);   // every day at 06:00
  Alarm.alarmRepeat(dowTuesday, 15, 50, 0, Zone2Off);  // every day at 06:10

  //Thurs
  Alarm.alarmRepeat(dowThursday, 15, 40, 5, Zone2On);   // every day at 06:00
  Alarm.alarmRepeat(dowThursday, 15, 50, 0, Zone2Off);  // every day at 06:10

  //Sat
  Alarm.alarmRepeat(dowSaturday, 15, 40, 5, Zone2On);   // every day at 06:00
  Alarm.alarmRepeat(dowSaturday, 15, 50, 0, Zone2Off);  // every day at 06:10

  //Sun
  Alarm.alarmRepeat(dowSunday, 15, 40, 5, Zone2On);   // every day at 06:00
  Alarm.alarmRepeat(dowSunday, 15, 50, 0, Zone2Off);  // every day at 06:10

  //***************************** Zone 2 Schedule *****************************************************

  //***************************** Zone 3 Schedule *****************************************************

  //Tue
  Alarm.alarmRepeat(dowTuesday, 15, 50, 5, Zone3On);  // every day at 06:00
  Alarm.alarmRepeat(dowTuesday, 16, 0, 0, Zone3Off);  // every day at 06:10

  //Thurs
  Alarm.alarmRepeat(dowThursday, 15, 50, 5, Zone3On);  // every day at 06:00
  Alarm.alarmRepeat(dowThursday, 16, 0, 0, Zone3Off);  // every day at 06:10

  //Sat
  Alarm.alarmRepeat(dowSaturday, 15, 50, 5, Zone3On);  // every day at 06:00
  Alarm.alarmRepeat(dowSaturday, 16, 0, 0, Zone3Off);  // every day at 06:10

  //Sun
  Alarm.alarmRepeat(dowSunday, 15, 50, 5, Zone3On);  // every day at 06:00
  Alarm.alarmRepeat(dowSunday, 16, 0, 0, Zone3Off);  // every day at 06:10

  //***************************** Zone 3 Schedule *****************************************************

  //***************************** Zone 4 Schedule *****************************************************

  //Tue
  Alarm.alarmRepeat(dowTuesday, 16, 0, 5, Zone4On);    // every day at 06:00
  Alarm.alarmRepeat(dowTuesday, 16, 10, 0, Zone4Off);  // every day at 06:10

  //Thurs
  Alarm.alarmRepeat(dowThursday, 16, 0, 5, Zone4On);    // every day at 06:00
  Alarm.alarmRepeat(dowThursday, 16, 10, 0, Zone4Off);  // every day at 06:10

  //Sat
  Alarm.alarmRepeat(dowSaturday, 16, 0, 5, Zone4On);    // every day at 06:00
  Alarm.alarmRepeat(dowSaturday, 16, 10, 0, Zone4Off);  // every day at 06:10

  //Sun
  Alarm.alarmRepeat(dowSunday, 16, 0, 5, Zone4On);    // every day at 06:00
  Alarm.alarmRepeat(dowSunday, 16, 10, 0, Zone4Off);  // every day at 06:10

  //***************************** Zone 3 Schedule *****************************************************
}

time_t prevDisplay = 0;  // when the digital clock was displayed

void loop() {
  digitalClockDisplay();
  Alarm.delay(1000);
}

// functions to be called when an alarm triggers:
void Zone1On() {
  digitalWrite(relayAlarm1, LOW);
}

void Zone1Off() {
  digitalWrite(relayAlarm1, HIGH);
}

void Zone2On() {
  digitalWrite(relayAlarm2, LOW);
}

void Zone2Off() {
  digitalWrite(relayAlarm2, HIGH);
}

void Zone3On() {
  digitalWrite(relayAlarm3, LOW);
}

void Zone3Off() {
  digitalWrite(relayAlarm3, HIGH);
}

void Zone4On() {
  digitalWrite(relayAlarm4, LOW);
}

void Zone4Off() {
  digitalWrite(relayAlarm4, HIGH);
}


void UpdateNTP() {
  Serial.println("TimeNTP Example");
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.print("IP number assigned by DHCP is ");
  Serial.println(WiFi.localIP());

  Serial.println("Starting UDP");
  Udp.begin(localPort);
  Serial.print("Local port: ");
  //Serial.println(Udp.localPort());
  Serial.println("waiting for sync");
  setSyncProvider(getNtpTime);
}

void digitalClockDisplay() {
  // digital clock display of the time
  Serial.print(hour());
  printDigits(minute());
  printDigits(second());
  Serial.print(" ");
  Serial.print(day());
  Serial.print(".");
  Serial.print(month());
  Serial.print(".");
  Serial.print(year());
  Serial.println();
}



void printDigits(int digits) {
  // utility for digital clock display: prints preceding colon and leading 0
  Serial.print(":");
  if (digits < 10)
    Serial.print('0');
  Serial.print(digits);
}

/*-------- NTP code ----------*/

const int NTP_PACKET_SIZE = 48;      // NTP time is in the first 48 bytes of message
byte packetBuffer[NTP_PACKET_SIZE];  //buffer to hold incoming & outgoing packets

time_t getNtpTime() {
  while (Udp.parsePacket() > 0)
    ;  // discard any previously received packets
  Serial.println("Transmit NTP Request");
  sendNTPpacket(timeServer);
  uint32_t beginWait = millis();
  while (millis() - beginWait < 1500) {
    int size = Udp.parsePacket();
    if (size >= NTP_PACKET_SIZE) {
      Serial.println("Receive NTP Response");
      Udp.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
      unsigned long secsSince1900;
      // convert four bytes starting at location 40 to a long integer
      secsSince1900 = (unsigned long)packetBuffer[40] << 24;
      secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
      secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
      secsSince1900 |= (unsigned long)packetBuffer[43];
      return secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR;
    }
  }
  Serial.println("No NTP Response :-(");
  return 0;  // return 0 if unable to get the time
}

// send an NTP request to the time server at the given address
void sendNTPpacket(IPAddress& address) {
  // set all bytes in the buffer to 0
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  packetBuffer[0] = 0b11100011;  // LI, Version, Mode
  packetBuffer[1] = 0;           // Stratum, or type of clock
  packetBuffer[2] = 6;           // Polling Interval
  packetBuffer[3] = 0xEC;        // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  packetBuffer[12] = 49;
  packetBuffer[13] = 0x4E;
  packetBuffer[14] = 49;
  packetBuffer[15] = 52;
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  Udp.beginPacket(address, 123);  //NTP requests are to port 123
  Udp.write(packetBuffer, NTP_PACKET_SIZE);
  Udp.endPacket();
}
