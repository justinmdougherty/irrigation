// Import required libraries
#include <TimeAlarms.h>         //
#include <WiFi.h>               //
#include <AsyncTCP.h>           //
#include <ESPAsyncWebServer.h>  //
#include <AsyncElegantOTA.h>    //
#include <TimeLib.h>            //
#include <Time.h>               //
#include <WiFiUdp.h>
#include <EEPROM.h>
#include <vector>

std::vector<int> selectedDays;

const char UPLOAD_TIME[] = __DATE__ " " __TIME__;



#define relayAlarm1 27
#define relayAlarm2 33
#define relayAlarm3 26
#define relayAlarm4 25
//#define relayAlarm5 15
//#define relayAlarm6 2
//#define relayAlarm7 0
//#define relayAlarm8 4

int scheduleEnabled = 0;  // Set it to 1 or 0 based on your initial preference **********************************CURRENTLY OFF************************************

const int EEPROM_SCHEDULE_STATE_ADDR = 0;
const int EEPROM_DURATION_ADDRESS = 1;
const int EEPROM_STARTTIME_ADDRESS = 2;
const int EEPROM_DAYS_ADDRESS = 3;



void runSchedule();
void digitalClockDisplay();


WiFiUDP Udp;
unsigned int localPort = 8888;  // local port to listen for UDP packets

// Set to true to define Relay as Normally Open (NO)
#define RELAY_NO true

// Set number of relays
//#define NUM_RELAYS 8
#define NUM_RELAYS 4

// Assign each GPIO to a relay
//int relayGPIOs[NUM_RELAYS] = { 27, 33, 26, 25, 15, 2, 0, 4 };
int relayGPIOs[NUM_RELAYS] = { 27, 33, 26, 25 };

// Replace with your network credentials
const char* ssid = "Fios";
const char* password = "JustinJamie11!!";

// NTP Servers:
//IPAddress timeServer(132, 163, 4, 101); // time-a.timefreq.bldrdoc.gov
IPAddress timeServer(15, 204, 21, 148);  // 0.us.pool.ntp.org
// IPAddress timeServer(132, 163, 4, 102); // time-b.timefreq.bldrdoc.gov
// IPAddress timeServer(132, 163, 4, 103); // time-c.timefreq.bldrdoc.gov


//const int timeZone = 1;     // Central European Time
//const int timeZone = -5;  // Eastern Standard Time (USA)
const int timeZone = -4;  // Eastern Daylight Time (USA)
//const int timeZone = -8;  // Pacific Standard Time (USA)
//const int timeZone = -7;  // Pacific Daylight Time (USA)

const char* PARAM_INPUT_1 = "relay";
const char* PARAM_INPUT_2 = "state";


// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html>
<head>
  <title>Irrigation</title>  
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    html {font-family: Arial; display: inline-block; text-align: center; color: white;}
    h2 {font-size: 3.0rem; text-align: center;}
    h3 {font-size: 2.0rem;}
    p {font-size: 1.0rem;}
    body {max-width: 600px; margin:0px auto; padding-bottom: 25px; text-align: left; padding-left: 25px; background-color: #000;}
    .switch {position: relative; display: inline-block; width: 120px; height: 68px} 
    .switch input {display: none}
    .slider {position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: #fff; border-radius: 34px}
    .slider:before {position: absolute; content: ""; height: 52px; width: 52px; left: 8px; bottom: 8px; background-color: #666; -webkit-transition: .4s; transition: .4s; border-radius: 68px}
    input:checked+.slider {background-color: #2196F3}
    input:checked+.slider:before {-webkit-transform: translateX(52px); -ms-transform: translateX(52px); transform: translateX(52px)}
    a:link, a:visited {color: blue;}
  </style>
</head>
<body>
  <h3>Irrigation Web Server</h3>
  <br>
  Schedule runs for <input type="number" id="duration" step="5" min="5" max="360" style="width: 40px;"> minutes<br>
  at <input type="time" id="startTime" style="width: 90px;"><br>
  <label for="days">Select days to run schedule:</label>
<select name="days" id="days" multiple>
  <option value="0">Sunday</option>
  <option value="1">Monday</option>
  <option value="2">Tuesday</option>
  <option value="3">Wednesday</option>
  <option value="4">Thursday</option>
  <option value="5">Friday</option>
  <option value="6">Saturday</option>
</select><br>
  <a href="/update">Update</a>
  
 <h3>Schedule On/Off</h3>
<label class="switch">
  <input type="checkbox" onchange="toggleSchedule(this)" id="schedule" %SCHEDULESTATE%>
  <span class="slider"></span>
</label>
<p id="scheduleStateText"></p>

%BUTTONPLACEHOLDER% <br>
<br>
Last Updated: %UPLOADTIME%

<script>
function toggleCheckbox(element) {
  var xhr = new XMLHttpRequest();
  if(element.checked){ xhr.open("GET", "/updates?relay="+element.id+"&state=1", true); }
  else { xhr.open("GET", "/updates?relay="+element.id+"&state=0", true); }
  xhr.send();
}

function loadSavedValues() {
  const xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      // Parse the response as JSON
      const savedValues = JSON.parse(this.responseText);

      // Set the input values
      document.getElementById("duration").value = savedValues.duration;
      document.getElementById("startTime").value = savedValues.startTime;
    }
  };

  // Send the request to fetch the saved values from your Arduino
  xhttp.open("GET", "/getSavedValues", true);
  xhttp.send();
}

function getSelectedDays() {
  var daysSelect = document.getElementById("days");
  var selectedDays = [];
  for (var i = 0; i < daysSelect.length; i++) {
    if (daysSelect.options[i].selected) {
      selectedDays.push(daysSelect.options[i].value);
    }
  }
  return selectedDays;
}

function toggleSchedule(element) {
  var xhr = new XMLHttpRequest();
  var requestedState = element.checked ? "1" : "0";
  if (requestedState == "1") {
  var duration = document.getElementById("duration").value;
  var startTime = document.getElementById("startTime").value;
  console.log("Duration:", duration, "minutes, Start time:", startTime);

  // TODO: Send duration and startTime values to the server
}
   xhr.onreadystatechange = function() {
    if (xhr.readyState == 4 && xhr.status == 200) {
      console.log("Toggle schedule response: " + xhr.responseText);
      var scheduleState = xhr.responseText == "1";
      console.log("Parsed schedule state:", scheduleState);
      if (requestedState != xhr.responseText) {
        element.checked = scheduleState;
        document.getElementById("scheduleStateText").innerHTML = scheduleState ? "Schedule ON" : "Schedule OFF";
      }
    }
  }
  var url = "/schedule?state=" + requestedState;
  console.log("Sending request to:", url);
  xhr.open("GET", url, true);
  xhr.send();
  setTimeout(requestScheduleState, 100);

}

function updateScheduleState(scheduleState) {
  document.getElementById("schedule").checked = scheduleState;
  document.getElementById("scheduleStateText").innerHTML = scheduleState ? "Schedule ON" : "Schedule OFF";
}


function requestScheduleState() {
  var xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (xhr.readyState == 4 && xhr.status == 200) {
      console.log("Schedule state response:", xhr.responseText);
      var scheduleState = xhr.responseText == "1";
      console.log("Parsed schedule state:", scheduleState);
      updateScheduleState(scheduleState);
    }
  }
  xhr.open("GET", "/getScheduleState", true);
  xhr.send();
}

function onScheduleSliderChange() {
  // Check if the schedule slider is toggled on
  const scheduleEnabled = document.getElementById("scheduleSlider").checked;

  // Get the start time value
  const startTime = document.getElementById("startTime").value;

  // Get the duration value
  const duration = document.getElementById("duration").value;

  // Get the selected days of the week
  const daysArray = [];
  for (let i = 1; i <= 7; i++) {
    const dayCheckbox = document.getElementById(`day${i}`);
    if (dayCheckbox.checked) {
      daysArray.push(i);
    }
  }
  const days = daysArray.join(",");
  
// Send the values to the Arduino
  const xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      // Handle the response, if necessary
    }
  };

  // Prepare the URL with the values as query parameters
  const url = `/schedule?enabled=${scheduleEnabled}&startTime=${startTime}&duration=${duration}&days=${days}`;

  // Send the request
  xhttp.open("GET", url, true);
  xhttp.send();
}

document.addEventListener('DOMContentLoaded', function() {
  setTimeout(requestScheduleState, 500);

loadSavedValues();

});
</script>




</body>
</html>
)rawliteral";

// Replaces placeholder with button section in your web page

String processor(const String& var) {
  if (var == "BUTTONPLACEHOLDER") {
    String buttons = "";
    for (int i = 1; i <= NUM_RELAYS; i++) {
      String relayStateValue = relayState(i);
      buttons += "<h4>Zone #" + String(i) + "</h4><label class=\"switch\"><input type=\"checkbox\" onchange=\"toggleCheckbox(this)\" id=\"" + String(i) + "\" " + relayStateValue + "><span class=\"slider\"></span></label>";
    }
    return buttons;
  } else if (var == "SCHEDULESTATE") {
    return scheduleEnabled ? "checked" : "";
  } else if (var == "UPLOADTIME") {
    return String(UPLOAD_TIME);
  }
  return String();
}


String relayState(int numRelay) {
  if (RELAY_NO) {
    if (digitalRead(relayGPIOs[numRelay - 1])) {
      return "";
    } else {
      return "checked";
    }
  } else {
    if (digitalRead(relayGPIOs[numRelay - 1])) {
      return "checked";
    } else {
      return "";
    }
  }
  return "";
}

void setup() {
  // Serial port for debugging purposes
  Serial.begin(115200);


  EEPROM.begin(512);
  scheduleEnabled = EEPROM.read(EEPROM_SCHEDULE_STATE_ADDR);

  if (scheduleEnabled == 0xFF || scheduleEnabled == 1) {  // EEPROM is uninitialized or has incorrect value
    scheduleEnabled = 1;                                  // Set the default state for the schedule  // Set it to 1 or 0 based on your initial preference **********************************CURRENTLY OFF************************************
    EEPROM.write(EEPROM_SCHEDULE_STATE_ADDR, scheduleEnabled);
    EEPROM.commit();
  }



  pinMode(relayAlarm1, OUTPUT);
  pinMode(relayAlarm2, OUTPUT);
  pinMode(relayAlarm3, OUTPUT);
  pinMode(relayAlarm4, OUTPUT);
  //pinMode(relayAlarm5, OUTPUT);
  //pinMode(relayAlarm7, OUTPUT);
  //pinMode(relayAlarm7, OUTPUT);
  //pinMode(relayAlarm8, OUTPUT);

  digitalWrite(relayAlarm1, HIGH);
  digitalWrite(relayAlarm2, HIGH);
  digitalWrite(relayAlarm3, HIGH);
  digitalWrite(relayAlarm4, HIGH);
  //digitalWrite(relayAlarm5, HIGH);
  //digitalWrite(relayAlarm6, HIGH);
  //digitalWrite(relayAlarm7, HIGH);
  //digitalWrite(relayAlarm8, HIGH);

  UpdateNTP();

  runSchedule();  // Add this line to call the runSchedule function

  Serial.println("Setting Alarms...");

  Alarm.alarmRepeat(0, 0, 1, UpdateNTP);

  time_t prevDisplay = 0;  // when the digital clock was displayed




  // Set all relays to off when the program starts - if set to Normally Open (NO), the relay is off when you set the relay to HIGH
  for (int i = 1; i <= NUM_RELAYS; i++) {
    pinMode(relayGPIOs[i - 1], OUTPUT);
    if (RELAY_NO) {
      digitalWrite(relayGPIOs[i - 1], HIGH);
    } else {
      digitalWrite(relayGPIOs[i - 1], LOW);
    }
  }

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  // Print ESP32 Local IP Address
  Serial.println(WiFi.localIP());

  //Debug Function
  server.on("/debugScheduleState", HTTP_GET, [](AsyncWebServerRequest* request) {
    String debugMessage = "scheduleEnabled: " + String(scheduleEnabled);
    request->send(200, "text/plain", debugMessage);
  });


  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest* request) {
    request->send_P(200, "text/html", index_html, processor);
  });


  //Send a GET request to <ESP_IP>/update?relay=<inputMessage>&state=<inputMessage2>
  server.on("/updates", HTTP_GET, [](AsyncWebServerRequest* request) {
    String inputMessage;
    String inputParam;
    String inputMessage2;
    String inputParam2;

    //GET input1 value on <ESP_IP>/update?relay=<inputMessage>
    if (request->hasParam(PARAM_INPUT_1) & request->hasParam(PARAM_INPUT_2)) {
      inputMessage = request->getParam(PARAM_INPUT_1)->value();
      inputParam = PARAM_INPUT_1;
      inputMessage2 = request->getParam(PARAM_INPUT_2)->value();
      inputParam2 = PARAM_INPUT_2;
      if (RELAY_NO) {
        Serial.print("NO ");
        digitalWrite(relayGPIOs[inputMessage.toInt() - 1], !inputMessage2.toInt());

      } else {
        Serial.print("NC ");
        digitalWrite(relayGPIOs[inputMessage.toInt() - 1], inputMessage2.toInt());
      }
    } else {
      inputMessage = "No message sent";
      inputParam = "none";
    }
    Serial.println(inputMessage + inputMessage2);
    request->send(200, "text/plain", "OK");
  });

  // Add the following route after the /updates route in the setup function
  server.on("/schedule", HTTP_GET, [](AsyncWebServerRequest* request) {
    String scheduleEnabled, startTime, duration, days;
    if (request->hasParam("enabled") && request->hasParam("startTime") && request->hasParam("duration") && request->hasParam("days")) {
      scheduleEnabled = request->getParam("enabled")->value();
      startTime = request->getParam("startTime")->value();
      duration = request->getParam("duration")->value();
      days = request->getParam("days")->value();

      EEPROM.writeString(EEPROM_STARTTIME_ADDRESS, startTime);
      EEPROM.writeString(EEPROM_DURATION_ADDRESS, duration);
      EEPROM.writeString(EEPROM_DAYS_ADDRESS, days);
      EEPROM.commit();

      // Then, call the runSchedule function to update the schedule with the new values
      if (scheduleEnabled == "1") {
        runSchedule();
      } else {
        disableSchedule();
      }


      // Send a response back to the client
      String response = "Schedule updated with the following values:\n";
      response += "State: " + scheduleEnabled + "\n";  // Use scheduleEnabled instead of state
      response += "Duration: " + duration + "\n";
      response += "Start Time: " + startTime + "\n";
      request->send(200, "text/plain", response);
    }
  });


  server.on("/getScheduleState", HTTP_GET, [](AsyncWebServerRequest* request) {
    Serial.print("Sending schedule state: ");
    Serial.println(scheduleEnabled);
    request->send(200, "text/plain", String(scheduleEnabled));
  });

  server.on("/getSavedValues", HTTP_GET, [](AsyncWebServerRequest* request) {
    String duration = String(EEPROM.read(EEPROM_DURATION_ADDRESS));
    String startTime = String(EEPROM.read(EEPROM_STARTTIME_ADDRESS));

    String jsonResponse = "{\"duration\":" + duration + ",\"startTime\":" + startTime + "}";
    request->send(200, "application/json", jsonResponse);
  });


  // Start server
  AsyncElegantOTA.begin(&server);
  server.begin();
}


void runSchedule() {
  // Read the duration and startTime values from the EEPROM
  String duration = String(EEPROM.read(EEPROM_DURATION_ADDRESS));
  String startTime = String(EEPROM.read(EEPROM_STARTTIME_ADDRESS));

  // Get the days string from EEPROM
  String daysStr = EEPROM.readString(EEPROM_DAYS_ADDRESS);
  char daysArray[daysStr.length() + 1];
  daysStr.toCharArray(daysArray, daysStr.length() + 1);

  if (scheduleEnabled) {
    // Get duration and start time from input boxes
    int durationMinutes = duration.toInt();
    int testStartHour = startTime.toInt() / 60;
    int testStartMinute = startTime.toInt() % 60;

    // Tokenize the days string using ',' as a delimiter
    char* token = strtok(daysArray, ",");
    while (token != NULL) {
      int day = atoi(token);
      if (day >= 1 && day <= 7) {
        selectedDays.push_back(day);
      }
      token = strtok(NULL, ",");
    }

    // Set alarms for each selected day
    for (int day : selectedDays) {

      //***************************** Zone 1 Schedule *****************************************************
      Alarm.alarmRepeat((timeDayOfWeek_t)day, testStartHour, testStartMinute, 0, Zone1On);
      Alarm.alarmRepeat((timeDayOfWeek_t)day, testStartHour, testStartMinute + durationMinutes, 0, Zone1Off);

      testStartMinute += durationMinutes;

      //***************************** Zone 2 Schedule *****************************************************
      Alarm.alarmRepeat((timeDayOfWeek_t)day, testStartHour, testStartMinute, 0, Zone2On);
      Alarm.alarmRepeat((timeDayOfWeek_t)day, testStartHour, testStartMinute + durationMinutes, 0, Zone2Off);

      testStartMinute += durationMinutes;

      //***************************** Zone 3 Schedule *****************************************************
      Alarm.alarmRepeat((timeDayOfWeek_t)day, testStartHour, testStartMinute, 0, Zone3On);
      Alarm.alarmRepeat((timeDayOfWeek_t)day, testStartHour, testStartMinute + durationMinutes, 0, Zone3Off);

      testStartMinute += durationMinutes;

      //***************************** Zone 4 Schedule *****************************************************
      Alarm.alarmRepeat((timeDayOfWeek_t)day, testStartHour, testStartMinute, 0, Zone4On);
      Alarm.alarmRepeat((timeDayOfWeek_t)day, testStartHour, testStartMinute + durationMinutes, 0, Zone4Off);

      testStartMinute += durationMinutes;
    }
    // You can add more zones by following the same pattern.
    // Just update the testStartMinute before setting the alarms for each zone.

  } else {
    Serial.println("No Schedule to run");
  }

  time_t prevDisplay = 0;  // when the digital clock was displayed
}

void disableSchedule() {
  for (int i = 0; i < dtNBR_ALARMS; i++) {
    Alarm.disable(i);
  }
}

void loop() {
  //digitalClockDisplay();
  Alarm.delay(1000);
}

// functions to be called when an alarm triggers:
void Zone1On() {
  digitalWrite(relayAlarm1, LOW);
}

void Zone1Off() {
  digitalWrite(relayAlarm1, HIGH);
}

void Zone2On() {
  digitalWrite(relayAlarm2, LOW);
}

void Zone2Off() {
  digitalWrite(relayAlarm2, HIGH);
}

void Zone3On() {
  digitalWrite(relayAlarm3, LOW);
}

void Zone3Off() {
  digitalWrite(relayAlarm3, HIGH);
}

void Zone4On() {
  digitalWrite(relayAlarm4, LOW);
}

void Zone4Off() {
  digitalWrite(relayAlarm4, HIGH);
}

/* Uncomment these to turn on more zones *************************************************************************************************
void Zone5On() {
  digitalWrite(relayAlarm5, LOW);
}

void Zone5Off() {
  digitalWrite(relayAlarm5, HIGH);
}

void Zone6On() {
  digitalWrite(relayAlarm6, LOW);
}

void Zone6Off() {
  digitalWrite(relayAlarm6, HIGH);
}

void Zone7On() {
  digitalWrite(relayAlarm7, LOW);
}

void Zone7Off() {
  digitalWrite(relayAlarm7, HIGH);
}

void Zone8On() {
  digitalWrite(relayAlarm8, LOW);
}

void Zone8Off() {
  digitalWrite(relayAlarm8, HIGH);
}
*/
//Uncomment these to turn on more zones *************************************************************************************************

void UpdateNTP() {
  Serial.println("TimeNTP Example");
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.print("IP number assigned by DHCP is ");
  Serial.println(WiFi.localIP());

  Serial.println("Starting UDP");
  Udp.begin(localPort);
  Serial.print("Local port: ");
  //Serial.println(Udp.localPort());
  Serial.println("waiting for sync");
  setSyncProvider(getNtpTime);
}

void digitalClockDisplay() {
  // digital clock display of the time
  Serial.print(hour());
  printDigits(minute());
  printDigits(second());
  Serial.print(" ");
  Serial.print(day());
  Serial.print(".");
  Serial.print(month());
  Serial.print(".");
  Serial.print(year());
  Serial.println();
}



void printDigits(int digits) {
  // utility for digital clock display: prints preceding colon and leading 0
  Serial.print(":");
  if (digits < 10)
    Serial.print('0');
  Serial.print(digits);
}

/*-------- NTP code ----------*/

const int NTP_PACKET_SIZE = 48;      // NTP time is in the first 48 bytes of message
byte packetBuffer[NTP_PACKET_SIZE];  //buffer to hold incoming & outgoing packets

time_t getNtpTime() {
  while (Udp.parsePacket() > 0)
    ;  // discard any previously received packets
  Serial.println("Transmit NTP Request");
  sendNTPpacket(timeServer);
  uint32_t beginWait = millis();
  while (millis() - beginWait < 1500) {
    int size = Udp.parsePacket();
    if (size >= NTP_PACKET_SIZE) {
      Serial.println("Receive NTP Response");
      Udp.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
      unsigned long secsSince1900;
      // convert four bytes starting at location 40 to a long integer
      secsSince1900 = (unsigned long)packetBuffer[40] << 24;
      secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
      secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
      secsSince1900 |= (unsigned long)packetBuffer[43];
      return secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR;
    }
  }
  Serial.println("No NTP Response :-(");
  return 0;  // return 0 if unable to get the time
}

// send an NTP request to the time server at the given address
void sendNTPpacket(IPAddress& address) {
  // set all bytes in the buffer to 0
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  packetBuffer[0] = 0b11100011;  // LI, Version, Mode
  packetBuffer[1] = 0;           // Stratum, or type of clock
  packetBuffer[2] = 6;           // Polling Interval
  packetBuffer[3] = 0xEC;        // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  packetBuffer[12] = 49;
  packetBuffer[13] = 0x4E;
  packetBuffer[14] = 49;
  packetBuffer[15] = 52;
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  Udp.beginPacket(address, 123);  //NTP requests are to port 123
  Udp.write(packetBuffer, NTP_PACKET_SIZE);
  Udp.endPacket();
}
