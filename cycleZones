// Import required libraries
#include <TimeAlarms.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <NTPClient.h>
#include <ESPAsyncWebServer.h>
#include <AsyncElegantOTA.h>
#include <TimeLib.h>
#include <Time.h>
#include <WiFiUdp.h>
#include <EEPROM.h>
//#include <vector>

//std::vector<int> selectedDays;

//Used for "Time of last update"
const char UPLOAD_TIME[] = __DATE__ " " __TIME__;

const char* PARAM_DURATION = "duration";
const char* PARAM_START_TIME = "startTime";
//const char* PARAM_DAYS = "days";
const int EEPROM_DURATION_ADDR = 6;
const int EEPROM_STARTTIME_ADDR = 10;
const int EEPROM_DAYS_ADDR = 20;
#define EEPROM_ODD_DAYS_ADDR 10   // EEPROM address for 'oddDays' variable
#define EEPROM_EVEN_DAYS_ADDR 11  // EEPROM address for 'evenDays' variable

int relayIndexToTurnOff;

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", -4 * 3600, 60000);

String duration;
String startTime;
//String daysArray;

//const int EEPROM_MAX_DAYS_LENGTH = 20;  // Assuming a maximum of 20 characters for the days string
const int EEPROM_SCHEDULE_STATE_ADDR = 0;

bool scheduleEnabled;
bool scheduleUpdated = false;
bool debugMode = false;
void saveScheduleState(bool state);
void runSchedule();


//Define relay pins
#define relayAlarm1 27
#define relayAlarm2 33
#define relayAlarm3 26
#define relayAlarm4 25


// Set to true to define Relay as Normally Open (NO)
#define RELAY_NO true

// Set number of relays
//#define NUM_RELAYS 8
#define NUM_RELAYS 4

// Assign each GPIO to a relay
//int relayGPIOs[NUM_RELAYS] = { 27, 33, 26, 25, 15, 2, 0, 4 };
int relayGPIOs[NUM_RELAYS] = { 27, 33, 26, 25 };

// Replace with your network credentials
const char* ssid = "Fios";
const char* password = "JustinJamie11!!";

const char* PARAM_INPUT_1 = "relay";
const char* PARAM_INPUT_2 = "state";


// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html>
<head>
  <title>Irrigation</title>  
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/favicon.ico" type="image/x-icon">
  <style>
    html {font-family: Arial; display: inline-block; text-align: center; color: white;}
    h2 {font-size: 3.0rem; text-align: center;}
    h3 {font-size: 2.0rem;}
    p {font-size: 1.0rem;}
    body {max-width: 600px; margin:0px auto; padding-bottom: 25px; text-align: left; padding-left: 25px; background-color: #000;}
    .switch {position: relative; display: inline-block; width: 120px; height: 68px} 
    .switch input {display: none}
    .slider {position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: #fff; border-radius: 34px}
    .slider:before {position: absolute; content: ""; height: 52px; width: 52px; left: 8px; bottom: 8px; background-color: #666; -webkit-transition: .4s; transition: .4s; border-radius: 68px}
    input:checked+.slider {background-color: #2196F3}
    input:checked+.slider:before {-webkit-transform: translateX(52px); -ms-transform: translateX(52px); transform: translateX(52px)}
    a:link, a:visited {color: blue;}
  </style>
</head>
<body>
  <h3>Irrigation Web Server</h3>
  <br>
  Schedule runs for <input type="number" id="duration" step="1" min="1" max="360" style="width: 40px;"> minutes<br>
  at <input type="time" id="startTime" style="width: 90px;"><br>
<label for="days">Select days to run schedule:</label>
<div class="form-check">
  <input class="form-check-input" type="checkbox" value="" id="oddDays" name="oddDays">
  <label class="form-check-label" for="oddDays">
    Water on Odd Days
  </label>
</div>
<div class="form-check">
  <input class="form-check-input" type="checkbox" value="" id="evenDays" name="evenDays">
  <label class="form-check-label" for="evenDays">
    Water on Even Days
  </label>
</div>
<br>
  <button id="saveButton" onclick="saveSettings()">Save Settings</button>
  <br>
  
  
 <h3>Schedule On/Off</h3>
<label class="switch">
  <input type="checkbox" onchange="toggleSchedule(this)" id="schedule" %SCHEDULESTATE%>
  <span class="slider"></span>
</label>
<p id="scheduleStateText"></p>

%BUTTONPLACEHOLDER% <br>
<br>
<p>Last Updated: %UPLOADTIME%<p>
<a href="/update">OTA Update</a>


<script>
function toggleCheckbox(element) {
  var xhr = new XMLHttpRequest();
  if(element.checked){ xhr.open("GET", "/updates?relay="+element.id+"&state=1", true); }
  else { xhr.open("GET", "/updates?relay="+element.id+"&state=0", true); }
  xhr.send();
}

function loadSavedValues() {
  const xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      const response = JSON.parse(this.responseText);
      document.getElementById("schedule").checked = response.enabled;
      document.getElementById("startTime").value = response.startTime;
      document.getElementById("duration").value = response.duration;

      const days = response.days.split(",").map(Number);
      const daysSelect = document.getElementById("days");
      for (const option of daysSelect.options) {
        option.selected = days.includes(Number(option.value));
      }
    }
  };
  // Send the request to fetch the saved values from your Arduino
  xhttp.open("GET", "/getSavedValues", true);
  xhttp.send();
}

function toggleSchedule(element) {
  var xhr = new XMLHttpRequest();
  var requestedState = element.checked ? "1" : "0";
  
  xhr.onreadystatechange = function() {
    if (xhr.readyState == 4 && xhr.status == 200) {
      console.log("Toggle schedule response: " + xhr.responseText);
      var scheduleState = xhr.responseText == "1";
      console.log("Parsed schedule state:", scheduleState);
      if (requestedState != xhr.responseText) {
        updateScheduleState(scheduleState);
      }
    }
  }
  var url = "/schedule?state=" + requestedState;
  console.log("Sending request to:", url);
  xhr.open("GET", url, true);
  xhr.send();
  setTimeout(requestScheduleState, 100);
}

function updateScheduleState(scheduleState) {
  var scheduleElement = document.getElementById("schedule");
  var scheduleStateText = document.getElementById("scheduleStateText");

  scheduleElement.checked = scheduleState;
  scheduleStateText.innerHTML = scheduleState ? "Schedule ON" : "Schedule OFF";
}

function getSelectedDays() {
  var daysSelect = document.getElementById("days");
  var selectedDays = [];
  for (var i = 0; i < daysSelect.length; i++) {
    if (daysSelect.options[i].selected) {
      selectedDays.push(daysSelect.options[i].value);
    }
  }
  return selectedDays;
}

function requestScheduleState() {
  var xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (xhr.readyState == 4 && xhr.status == 200) {
      console.log("Schedule state response:", xhr.responseText);
      var scheduleState = xhr.responseText == "1";
      console.log("Parsed schedule state:", scheduleState);
      updateScheduleState(scheduleState);
    }
  }
  xhr.open("GET", "/getScheduleState", true);
  xhr.send();
}

function saveSettings() {
  const duration = document.getElementById('duration').value;
  const startTime = document.getElementById('startTime').value;
  const days = Array.from(document.getElementById('days').selectedOptions).map(option => option.value);

  // Split the startTime into startHour and startMinute
  let [startHour, startMinute] = startTime.split(':').map(Number);
  
  const startTime24 = `${startHour.toString().padStart(2, '0')}:${startMinute.toString().padStart(2, '0')}`;

  const queryParams = new URLSearchParams({
    duration: duration,
    startTime: startTime24,
    days: days.join(',')
  });

  fetch('/save-settings?' + queryParams.toString())
    .then(response => response.text())
    .then(data => {
      // Handle the response data here
      console.log("Save settings response:", data);

      const currentTime = new Date().toLocaleTimeString();
      const savedSettingsMessage = `Settings saved at ${currentTime}\nDuration: ${duration} minutes\nStart time: ${startTime}\nDays: ${days.join(', ')}`;
      alert(savedSettingsMessage);
    })
    .catch(error => {
      console.error("Error saving settings:", error);
    });
}

function onScheduleSliderChange() {
  const scheduleEnabled = document.getElementById("scheduleSlider").checked;
  const startTime = document.getElementById("startTime").value;
  const duration = document.getElementById("duration").value;
  const daysArray = [];
  for (let i = 1; i <= 7; i++) {
    const dayCheckbox = document.getElementById(`day${i}`);
    if (dayCheckbox.checked) {
      daysArray.push(i);
    }
  }
  const days = daysArray.join(",");

  // paste applyschedule settings here
}

function applyScheduleSettings(scheduleEnabled, startTime, duration, days) {
  const xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      // Handle the response, if necessary
    }
  };

  // Prepare the URL with the values as query parameters
  const url = `/schedule?enabled=${scheduleEnabled}&startTime=${startTime}&duration=${duration}&days=${days}`;

  // Send the request
  xhttp.open("GET", url, true);
  xhttp.send();
}


document.addEventListener('DOMContentLoaded', function() {
  setTimeout(requestScheduleState, 500);
  loadSavedValues();
});  
</script>
  


</body>
</html>
)rawliteral";

// Replaces placeholder with button section in your web page
String processor(const String& var) {
  //Serial.println(var);
  if (var == "BUTTONPLACEHOLDER") {
    String buttons = "";
    for (int i = 1; i <= NUM_RELAYS; i++) {
      String relayStateValue = relayState(i);
      buttons += "<h4>Zone #" + String(i) + "</h4><label class=\"switch\"><input type=\"checkbox\" onchange=\"toggleCheckbox(this)\" id=\"" + String(i) + "\" " + relayStateValue + "><span class=\"slider\"></span></label>";
    }
    return buttons;
  }
  return String();
}

String relayState(int numRelay) {
  if (RELAY_NO) {
    if (digitalRead(relayGPIOs[numRelay - 1])) {
      return "";
    } else {
      return "checked";
    }
  } else {
    if (digitalRead(relayGPIOs[numRelay - 1])) {
      return "checked";
    } else {
      return "";
    }
  }
  return "";
}

void saveDuration(int duration) {
  EEPROM.put(EEPROM_DURATION_ADDR, duration);
  EEPROM.commit();
  Serial.print("Saved duration: ");
  Serial.println(duration);
}

int loadDuration() {
  int duration;
  EEPROM.get(EEPROM_DURATION_ADDR, duration);
  return duration;
}

void saveStartTime(String _startTime) {
  for (uint i = 0; i < _startTime.length(); ++i) {
    EEPROM.write(EEPROM_STARTTIME_ADDR + i, _startTime[i]);
  }
  EEPROM.write(EEPROM_STARTTIME_ADDR + _startTime.length(), '\0');
  EEPROM.commit();
  Serial.print("Saved start time: ");
  Serial.println(_startTime);
  Serial.print("Current time: ");
}

String loadStartTime() {
  String startTime = "";
  for (int i = 0; i < 8; i++) {  // HH:MM:SS format has 8 characters
    char c = EEPROM.read(EEPROM_STARTTIME_ADDR + i);
    if (c == '\0') break;
    startTime += c;
  }
  return startTime;
}

void saveDays(String days) {
  for (int i = 0; i < days.length(); i++) {
    EEPROM.write(EEPROM_DAYS_ADDR + i, days[i]);
  }
  EEPROM.write(EEPROM_DAYS_ADDR + days.length(), '\0');
  EEPROM.commit();
  Serial.print("Saved days: ");
  Serial.println(days);
}

String loadDays() {
  String daysStr = "";
  const int maxDaysStrLength = 20;
  for (int i = 0; i < maxDaysStrLength; i++) {
    char currentChar = char(EEPROM.read(EEPROM_DAYS_ADDR + i));
    if (currentChar == '\0') {
      break;
    }
    daysStr += currentChar;
  }
  return daysStr;
}




void saveScheduleState(bool state) {
  EEPROM.write(EEPROM_SCHEDULE_STATE_ADDR, state);
  EEPROM.commit();
  Serial.print("Schedule state:");
  Serial.println(state);
}

bool loadScheduleState() {
  return EEPROM.read(EEPROM_SCHEDULE_STATE_ADDR);
}

void turnOffRelayWithIndex() {
  Serial.print("Turning off relay at index ");
  Serial.println(relayIndexToTurnOff);
  if (RELAY_NO) {
    digitalWrite(relayGPIOs[relayIndexToTurnOff], HIGH);
  } else {
    digitalWrite(relayGPIOs[relayIndexToTurnOff], LOW);
  }
}

void setup() {
  // Serial port for debugging purposes
  Serial.begin(115200);


  EEPROM.begin(512);
  scheduleEnabled = loadScheduleState();
  duration = loadDuration();
  startTime = loadStartTime();
  daysArray = loadDays();

  pinMode(relayAlarm1, OUTPUT);
  pinMode(relayAlarm2, OUTPUT);
  pinMode(relayAlarm3, OUTPUT);
  pinMode(relayAlarm4, OUTPUT);

  digitalWrite(relayAlarm1, HIGH);
  digitalWrite(relayAlarm2, HIGH);
  digitalWrite(relayAlarm3, HIGH);
  digitalWrite(relayAlarm4, HIGH);

  // Set all relays to off when the program starts - if set to Normally Open (NO), the relay is off when you set the relay to HIGH
  for (int i = 1; i <= NUM_RELAYS; i++) {
    pinMode(relayGPIOs[i - 1], OUTPUT);
    if (RELAY_NO) {
      digitalWrite(relayGPIOs[i - 1], HIGH);
    } else {
      digitalWrite(relayGPIOs[i - 1], LOW);
    }
  }

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  // Print ESP32 Local IP Address
  Serial.println(WiFi.localIP());


  timeClient.begin();
  timeClient.update();

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest* request) {
    request->send_P(200, "text/html", index_html, processor);
  });

  //Send a GET request to <ESP_IP>/update?relay=<inputMessage>&state=<inputMessage2>
  server.on("/updates", HTTP_GET, [](AsyncWebServerRequest* request) {
    String inputMessage;
    String inputParam;
    String inputMessage2;
    String inputParam2;

    if (request->hasParam(PARAM_INPUT_1) & request->hasParam(PARAM_INPUT_2)) {
      inputMessage = request->getParam(PARAM_INPUT_1)->value();
      inputParam = PARAM_INPUT_1;
      inputMessage2 = request->getParam(PARAM_INPUT_2)->value();
      inputParam2 = PARAM_INPUT_2;

      int relayIndex = inputMessage.toInt() - 1;
      if (RELAY_NO) {
        Serial.print("NO ");
        digitalWrite(relayGPIOs[relayIndex], !inputMessage2.toInt());
      } else {
        Serial.print("NC ");
        digitalWrite(relayGPIOs[relayIndex], inputMessage2.toInt());
      }

      // Check if the zone is manually toggled on and set a timer to turn it off after the duration
      if (inputMessage2.toInt() == 1) {
        int durationInt = duration.toInt();
        Serial.print("Duration: ");
        Serial.println(durationInt);
        relayIndexToTurnOff = relayIndex;
        Alarm.timerOnce(durationInt * 60, turnOffRelayWithIndex);
      }

    } else {
      inputMessage = "No message sent";
      inputParam = "none";
    }
    Serial.println(inputMessage + inputMessage2);
    request->send(200, "text/plain", "OK");
  });

  //Checks the scheduleEnabled state, then gets the time, durateion and days for the schedule
  server.on("/schedule", HTTP_GET, [&](AsyncWebServerRequest* request) {
    String inputMessage;

    if (request->hasParam("state")) {
      String scheduleEnabledStr = request->getParam("state")->value();
      scheduleEnabled = (scheduleEnabledStr == "1");
      saveScheduleState(scheduleEnabled);
    }

    if (request->hasParam(PARAM_DURATION)) {
      int duration = request->getParam(PARAM_DURATION)->value().toInt();
      saveDuration(duration);
    }

    if (request->hasParam(PARAM_START_TIME)) {
      startTime = request->getParam(PARAM_START_TIME)->value();
      saveStartTime(startTime);
    }

    if (request->hasParam(PARAM_DAYS)) {
      daysArray = request->getParam(PARAM_DAYS)->value();
      saveDays(daysArray);
    }

    if (scheduleEnabled) {
      runSchedule();
    } else {
      for (int i = 0; i < dtNBR_ALARMS; i++) {
        Alarm.disable(i);
      }
    }
    request->send(200, "text/plain", scheduleEnabled ? "1" : "0");
  });

  server.on("/getSavedValues", HTTP_GET, [](AsyncWebServerRequest* request) {
    String json = "{";
    json += "\"duration\":" + String(loadDuration()) + ",";
    json += "\"startTime\":\"" + loadStartTime() + "\",";
    json += "\"days\":\"" + loadDays() + "\"";
    json += "}";
    request->send(200, "application/json", json);
  });

  server.on("/getScheduleState", HTTP_GET, [](AsyncWebServerRequest* request) {
    bool scheduleState = loadScheduleState();
    request->send(200, "text/plain", scheduleState ? "1" : "0");
  });

  server.on("/save-settings", HTTP_GET, [](AsyncWebServerRequest* request) {
    if (request->hasParam(PARAM_DURATION)) {
      int duration = request->getParam(PARAM_DURATION)->value().toInt();
      saveDuration(duration);
    }

    if (request->hasParam(PARAM_START_TIME)) {
      String startTime = request->getParam(PARAM_START_TIME)->value();
      saveStartTime(startTime);
    }

    if (request->hasParam(PARAM_DAYS)) {
      String daysArray = request->getParam(PARAM_DAYS)->value();
      saveDays(daysArray);
    }

    // Set scheduleUpdated flag to true
    scheduleUpdated = true;
    Serial.println("Setting Alarms...");

    request->send(200, "text/plain", "OK");
  });


  server.on("/getStartTime", HTTP_GET, [](AsyncWebServerRequest* request) {
    String startTime = loadStartTime();
    int colonIndex = startTime.indexOf(':');
    int startHour = startTime.substring(0, colonIndex).toInt();
    int startMinute = startTime.substring(colonIndex + 1).toInt();

    if (startHour == 0) {
      startHour = 12;
    }

    char startTimeBuf[6];
    snprintf(startTimeBuf, sizeof(startTimeBuf), "%02d:%02d", startHour, startMinute);

    request->send(200, "text/plain", startTimeBuf);
  });


  server.on("/getDuration", HTTP_GET, [](AsyncWebServerRequest* request) {
    int durationInt = loadDuration();
    request->send(200, "text/plain", String(durationInt));
  });


  server.on("/getDays", HTTP_GET, [](AsyncWebServerRequest* request) {
    request->send(200, "text/plain", loadDays());
  });

  AsyncElegantOTA.begin(&server);
  server.begin();
}

void runSchedule() {
  if (scheduleEnabled) {

    Serial.println("Schedule is on.");

    // Read the duration and startTime values from the EEPROM
    int duration = loadDuration();
    String startTime = loadStartTime();

    // Get the odd and even days watering flags from EEPROM
    bool oddDaysWatering = EEPROM.read(EEPROM_ODD_DAYS_ADDR);
    bool evenDaysWatering = EEPROM.read(EEPROM_EVEN_DAYS_ADDR);

    // Get duration and start time from input boxes
    int durationMinutes = duration;
    int colonIndex = startTime.indexOf(':');
    int startHour = startTime.substring(0, colonIndex).toInt();
    int startMinute = startTime.substring(colonIndex + 1).toInt();

    // Get current time
    int currentDate = day();
    int currentHour = hour();
    int currentMinute = minute();

    // Check if watering should be performed today
    if ((oddDaysWatering && currentDate % 2 != 0) || (evenDaysWatering && currentDate % 2 == 0)) {
      for (int zone = 0; zone < NUM_RELAYS; ++zone) {
        if (currentHour < startHour || (currentHour == startHour && currentMinute <= startMinute)) {
          // Update time
          timeClient.update();

          // Print statement
          Serial.print("Current Date: ");
          Serial.println(currentDate);
          Serial.print("Current Time: ");
          Serial.println(timeClient.getFormattedTime());
          Serial.print("Scheduled Start Time: ");
          Serial.print(startHour);
          Serial.print(":");
          Serial.println(startMinute);

          // Alarm
          Alarm.alarmOnce(startHour, startMinute, 0, []() {
            digitalWrite(relayGPIOs[zone], LOW);
          });
          Alarm.alarmOnce(startHour, startMinute + durationMinutes, 0, []() {
            digitalWrite(relayGPIOs[zone], HIGH);
          });
        }
        Alarm.alarmRepeat(startHour, startMinute, 0, []() {
          digitalWrite(relayGPIOs[zone], LOW);
        });
        Alarm.alarmRepeat(startHour, startMinute + durationMinutes, 0, []() {
          digitalWrite(relayGPIOs[zone], HIGH);
        });
        startMinute += durationMinutes;
      }
    }
  } else {
    Serial.println("Schedule disabled.");
  }
}


/* OLD
void runSchedule() {
  if (scheduleEnabled) {
    // Clear previously selected days
    selectedDays.clear();
    Serial.println("Schedule is on.");
    printSavedSettings();
    // Read the duration and startTime values from the EEPROM
    duration = loadDuration();
    startTime = loadStartTime();

    // Get the days string from EEPROM
    String daysStr = loadDays();
    char daysArray[daysStr.length() + 1];
    daysStr.toCharArray(daysArray, daysStr.length() + 1);

    // Tokenize the days string using ',' as a delimiter
    char* token = strtok(daysArray, ",");
    while (token != NULL) {
      int day = atoi(token);
      if (day >= 1 && day <= 7) {
        selectedDays.push_back(day);
      }
      token = strtok(NULL, ",");
    }

    // Get duration and start time from input boxes
    int durationMinutes = duration.toInt();
    int colonIndex = startTime.indexOf(':');
    int startHour = startTime.substring(0, colonIndex).toInt();
    int startMinute = startTime.substring(colonIndex + 1).toInt();

    // Get current time
    int currentDay = weekday();
    int currentHour = hour();
    int currentMinute = minute();

    // Set alarms for each selected day
    for (int day : selectedDays) {
      int originalStartMinute = startMinute;
      for (int zone = 0; zone < NUM_RELAYS; ++zone) {
        void (*zoneOnFunction)();
        void (*zoneOffFunction)();
        switch (zone) {
          case 0:
            zoneOnFunction = Zone1On;
            zoneOffFunction = Zone1Off;
            break;
          case 1:
            zoneOnFunction = Zone2On;
            zoneOffFunction = Zone2Off;
            break;
          case 2:
            zoneOnFunction = Zone3On;
            zoneOffFunction = Zone3Off;
            break;
          case 3:
            zoneOnFunction = Zone4On;
            zoneOffFunction = Zone4Off;
            break;
            // Add more cases as needed...
        }
        if (currentDay == day && (currentHour < startHour || (currentHour == startHour && currentMinute <= startMinute))) {
          Alarm.alarmOnce(startHour, startMinute, 0, zoneOnFunction);
          Alarm.alarmOnce(startHour, startMinute + durationMinutes, 0, zoneOffFunction);
        }
        Alarm.alarmRepeat((timeDayOfWeek_t)day, startHour, startMinute, 0, zoneOnFunction);
        Alarm.alarmRepeat((timeDayOfWeek_t)day, startHour, startMinute + durationMinutes, 0, zoneOffFunction);
        startMinute += durationMinutes;
      }
      startMinute = originalStartMinute;
    }
  } else {
    Serial.println("Schedule disabled.");
  }
}
*/

void printSavedSettings() {
  // Read the duration, startTime and days values from the EEPROM
  int durationVal = loadDuration();
  String startTime = loadStartTime();
  String days = loadDays();

  // Convert the duration to a String
  String duration = String(durationVal);

  // Print the duration
  Serial.println("Duration: " + duration);

  // Print the startTime
  Serial.println("Start time: " + startTime);

  // Print the days
  Serial.println("Days: " + days);
}



void loop() {
  timeClient.update();
  delay(1000);
  
  // Write to EEPROM
  bool oddDays = true;
  bool evenDays = false;
  EEPROM.write(EEPROM_ODD_DAYS_ADDR, oddDays ? 1 : 0);
  EEPROM.write(EEPROM_EVEN_DAYS_ADDR, evenDays ? 1 : 0);
  EEPROM.commit();  // Make sure to commit the changes to save to EEPROM

  // Read from EEPROM
  oddDays = EEPROM.read(EEPROM_ODD_DAYS_ADDR) != 0;    // If the read byte is not 0, interpret as 'true'
  evenDays = EEPROM.read(EEPROM_EVEN_DAYS_ADDR) != 0;  // If the read byte is not 0, interpret as 'true'
  if (debugMode) {
    Serial.print("Current time: ");
    Serial.println(timeClient.getFormattedTime());
  }

  if (scheduleUpdated) {
    runSchedule();
    scheduleUpdated = false;
  }
}

// functions to be called when an alarm triggers:
void Zone1On() {
  Serial.println("Zone 1 On");
  digitalWrite(relayAlarm1, LOW);
}

void Zone1Off() {
  Serial.println("Zone 1 Off");
  digitalWrite(relayAlarm1, HIGH);
}

void Zone2On() {
  Serial.println("Zone 2 On");
  digitalWrite(relayAlarm2, LOW);
}

void Zone2Off() {
  Serial.println("Zone 2 Off");
  digitalWrite(relayAlarm2, HIGH);
}

void Zone3On() {
  Serial.println("Zone 3 On");
  digitalWrite(relayAlarm3, LOW);
}

void Zone3Off() {
  Serial.println("Zone 3 Off");
  digitalWrite(relayAlarm3, HIGH);
}

void Zone4On() {
  Serial.println("Zone 4 On");
  digitalWrite(relayAlarm4, LOW);
}

void Zone4Off() {
  Serial.println("Zone 4 Off");
  digitalWrite(relayAlarm4, HIGH);
}
