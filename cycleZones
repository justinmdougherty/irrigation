// Import required libraries
#include <TimeAlarms.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <AsyncElegantOTA.h>
#include <TimeLib.h>
#include <Time.h>
#include <ArduinoJson.h>


int duration = 0;
int currentZone = 0;
bool cycleInProgress = false;
unsigned long lastZoneSwitchTime = 0;
unsigned long cycleEndTime = 0;
unsigned long cycleStartTime;



// Set to true to define Relay as Normally Open (NO)
#define RELAY_NO true

// Set number of relays
#define NUM_RELAYS 4

// Assign each GPIO to a relay
int relayGPIOs[NUM_RELAYS] = { 27, 33, 26, 25 };

// Replace with your network credentials
const char* ssid = "Fios";
const char* password = "JustinJamie11!!";

const char* PARAM_INPUT_1 = "relay";
const char* PARAM_INPUT_2 = "state";

// Set your Static IP address
IPAddress local_IP(192, 168, 86, 30);

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);
AsyncWebSocket ws("/ws");


const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <title>Irrigation</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    html {font-family: Arial; display: inline-block; text-align: center; color: white;}
    h2 {font-size: 3.0rem;}
    h3 {font-size: 2.0rem;}
    p {font-size: 3.0rem;}
    body {max-width: 600px; margin:0px auto; padding-bottom: 25px; background-color: #000;}
    .switch {position: relative; display: inline-block; width: 120px; height: 68px} 
    .switch input {display: none}
    .slider {position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: #fff; border-radius: 34px}
    .slider:before {position: absolute; content: ""; height: 52px; width: 52px; left: 8px; bottom: 8px; background-color: #666; -webkit-transition: .4s; transition: .4s; border-radius: 68px}
    input:checked+.slider {background-color: #2196F3}
    input:checked+.slider:before {-webkit-transform: translateX(52px); -ms-transform: translateX(52px); transform: translateX(52px)}
  </style>
</head>
<body>
  <h2>Watering System Controller</h2>
  <div class="wrapper">
    <div class="info">
      <p>Current Zone: <span id="currentZone">1</span></p>
      <p>Time Remaining: <span id="timeRemaining">00:00</span></p>
    </div>
    <div class="duration-control">
      <label for="durationInput" id="durationLabel">Set Duration (mins):</label>
      <input type="number" id="durationInput" min="1" max="30" value="20" step="1" />
    </div>
  </div>
  <button class="button" onclick="startCycle()" id="startButton">Start Watering</button>
  <button class="button" onclick="cancelCycle()" id="cancelButton" disabled>Cancel</button>


   <script>
    var durationInput = document.getElementById("durationInput");
    var durationLabel = document.getElementById("durationLabel");
    var currentZoneElement = document.getElementById("currentZone");
    var currentZoneNumber = document.getElementById("currentZoneNumber");
    var timeRemaining = document.getElementById("timeRemaining");
    var cancelBtn = document.getElementById("cancelButton");
    var cycleInterval;

    function toggleCheckbox(element) {
      var xhr = new XMLHttpRequest();
      if (element.checked) {
        xhr.open("GET", "/updates?relay=" + element.id + "&state=1", true);
      } else {
        xhr.open("GET", "/updates?relay=" + element.id + "&state=0", true);
      }
      xhr.send();
    }

    function updateDurationLabel(value) {
      durationLabel.innerHTML = value;
    }

    function startCycle() {
     var duration = durationInput.value * 60 * 1000;
     var xhr = new XMLHttpRequest();
     xhr.open("GET", "/startCycle?duration=" + duration, true);
     xhr.send();
    cancelBtn.disabled = false;
}


    function cancelCycle() {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", "/cancelCycle", true);
      xhr.send();
      cancelBtn.disabled = true;
    }

    function updateTimeRemaining(minutes, seconds) {
      timeRemaining.innerHTML = minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    }

    function updateCurrentZone(zone) {
      currentZoneNumber.innerHTML = zone;
    }

    function showCurrentZone() {
      currentZoneElement.style.display = 'block';
    }

      function handleEvent(event) {
    const data = JSON.parse(event.data);
    if (data.id === "timeRemaining") {
      document.getElementById("timeRemaining").innerText = data.value;
    } else if (data.id === "currentZone") {
      document.getElementById("currentZone").innerText = data.value;
    }
  }

  function initWebSocket() {
    if (typeof WebSocket === "undefined") {
      setTimeout(initWebSocket, 1000);
      return;
    }

    const ws = new WebSocket("ws://" + window.location.hostname + ":81/");
    ws.onopen = function() {
      console.log("WebSocket connection opened");
    };
    ws.onclose = function() {
      console.log("WebSocket connection closed");
      setTimeout(initWebSocket, 1000);
    };
    ws.onmessage = function(event) {
      handleEvent(event);
    };

    
  }

function handleEvent(event) {
  const data = JSON.parse(event.data);
  console.log(data); // Add this line to log the received data
  if (data.id === "timeRemaining") {
    document.getElementById("timeRemaining").innerText = data.value;
  } else if (data.id === "currentZone") {
    document.getElementById("currentZone").innerText = data.value;
  }
}


  function initWebSocket() {
    if (typeof WebSocket === "undefined") {
      setTimeout(initWebSocket, 1000);
      return;
    }

    const ws = new WebSocket("ws://" + window.location.hostname + ":81/");
    ws.onopen = function() {
      console.log("WebSocket connection opened");
    };
    ws.onclose = function() {
      console.log("WebSocket connection closed");
      setTimeout(initWebSocket, 1000);
    };
    ws.onmessage = function(event) {
      handleEvent(event);
    };
  }

  document.addEventListener("DOMContentLoaded", function(event) {
    document.getElementById("startButton").addEventListener("click", function() {
      var duration = document.getElementById("setDuration").value;
      var zone = document.getElementById("zoneSelect").value;
      ws.send(JSON.stringify({"type": "start", "zone": zone, "duration": duration}));
    });
    document.getElementById("cancelButton").addEventListener("click", function() {
      ws.send(JSON.stringify({"type": "cancel"}));
    });
  });

  // Call initWebSocket to establish WebSocket connection
  initWebSocket();
</script>
  </script>
</body>

</body>
</html>
)rawliteral";

String relayState(int numRelay) {
  if (RELAY_NO) {
    if (digitalRead(relayGPIOs[numRelay - 1])) {
      return "";
    } else {
      return "checked";
    }
  } else {
    if (digitalRead(relayGPIOs[numRelay - 1])) {
      return "checked";
    } else {
      return "";
    }
  }
  return "";
}

String processor(const String& var) {
  if (var == "BUTTONPLACEHOLDER1") {
    String buttons = "";
    for (int i = 1; i <= NUM_RELAYS; i++) {
      String relayStateValue = relayState(i);
      buttons += "<h4>Zone #" + String(i) + "</h4><label class=\"switch\"><input type=\"checkbox\" onchange=\"toggleCheckbox(this)\" id=\"" + String(i) + "\" " + relayStateValue + "><span class=\"slider\"></span></label>";
    }
    return buttons;
  }
  return String();
}

void sendEvent(const String& event, const String& data) {
  StaticJsonDocument<200> jsonDoc;
  jsonDoc["event"] = event;
  jsonDoc["data"] = data;
  String json;
  serializeJson(jsonDoc, json);

  for (size_t i = 0; i < ws.count(); i++) {
    ws.text(ws.client(i)->id(), json);
  }
}


void relayControl(int currentZone) {
  for (int i = 0; i < NUM_RELAYS; i++) {
    if (i == currentZone - 1) {
      if (RELAY_NO) {
        digitalWrite(relayGPIOs[i], LOW);
      } else {
        digitalWrite(relayGPIOs[i], HIGH);
      }
    } else {
      if (RELAY_NO) {
        digitalWrite(relayGPIOs[i], HIGH);
      } else {
        digitalWrite(relayGPIOs[i], LOW);
      }
    }
  }
}

void startCycle() {
  if (!cycleInProgress) {
    cycleInProgress = true;
    cycleStartTime = millis();
    cycleEndTime = millis() + (duration * 60 * 1000);
    currentZone = 1;
    digitalWrite(relayGPIOs[currentZone - 1], LOW);
  }
}

void cancelCycle() {
  if (cycleInProgress) {
    cycleInProgress = false;
    for (int i = 0; i < NUM_RELAYS; i++) {
      digitalWrite(relayGPIOs[i], HIGH);
    }
  }
}

void onWsEvent(AsyncWebSocket* server, AsyncWebSocketClient* client, AwsEventType type, void* arg, uint8_t* data, size_t len) {
  if (type == WS_EVT_CONNECT) {
    Serial.printf("WebSocket client #%u connected from %s\n", client->id(), client->remoteIP().toString().c_str());
  } else if (type == WS_EVT_DISCONNECT) {
    Serial.printf("WebSocket client #%u disconnected\n", client->id());
  }
}


void setup() {

  // Serial port for debugging purposes
  Serial.begin(115200);

  ws.onEvent(onWsEvent);
  server.addHandler(&ws);


  // Set all relays to off when the program starts - if set to Normally Open (NO), the relay is off when you set the relay to HIGH
  for (int i = 1; i <= NUM_RELAYS; i++) {
    pinMode(relayGPIOs[i - 1], OUTPUT);
    if (RELAY_NO) {
      digitalWrite(relayGPIOs[i - 1], HIGH);
    } else {
      digitalWrite(relayGPIOs[i - 1], LOW);
    }
  }

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  // Print ESP32 Local IP Address
  Serial.println(WiFi.localIP());

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest* request) {
    request->send_P(200, "text/html", index_html, processor);
  });


  //Send a GET request to <ESP_IP>/update?relay=<inputMessage>&state=<inputMessage2>
  server.on("/updates", HTTP_GET, [](AsyncWebServerRequest* request) {
    String inputMessage;
    String inputParam;
    String inputMessage2;
    String inputParam2;

    //GET input1 value on <ESP_IP>/update?relay=<inputMessage>
    if (request->hasParam(PARAM_INPUT_1) & request->hasParam(PARAM_INPUT_2)) {
      inputMessage = request->getParam(PARAM_INPUT_1)->value();
      inputParam = PARAM_INPUT_1;
      inputMessage2 = request->getParam(PARAM_INPUT_2)->value();
      inputParam2 = PARAM_INPUT_2;
      if (RELAY_NO) {
        Serial.print("NO ");
        digitalWrite(relayGPIOs[inputMessage.toInt() - 1], !inputMessage2.toInt());

      } else {
        Serial.print("NC ");
        digitalWrite(relayGPIOs[inputMessage.toInt() - 1], inputMessage2.toInt());
      }
    } else {
      inputMessage = "No message sent";
      inputParam = "none";
    }
    Serial.println(inputMessage + inputMessage2);
    request->send(200, "text/plain", "OK");
  });

  server.on("/startCycle", HTTP_GET, [](AsyncWebServerRequest* request) {
    startCycle();
    request->send(200, "text/plain", "Watering started");
    digitalWrite(LED_BUILTIN, LOW);
  });

  server.on("/cancelCycle", HTTP_GET, [](AsyncWebServerRequest* request) {
    cancelCycle();
    request->send(200, "text/plain", "Watering cancelled");
    digitalWrite(LED_BUILTIN, HIGH);
  });


  server.on("/getZoneStatus", HTTP_GET, [](AsyncWebServerRequest* request) {
    unsigned long remainingTime = 0;
    if (cycleInProgress) {
      remainingTime = (duration * 1000) - (millis() - lastZoneSwitchTime);
    }
    String jsonResponse = "{\"zone\": " + String(currentZone) + ", \"remainingTime\": " + String(remainingTime / 1000) + "}";
    request->send(200, "application/json", jsonResponse);
  });

  // Start server
  AsyncElegantOTA.begin(&server);
  server.begin();
}

void loop() {
  AsyncElegantOTA.loop();
  static unsigned long lastZoneSwitchTime = 0;
  static bool cycleInProgress = false;

  if (cycleInProgress) {
    String timeRemainingString = String((cycleEndTime - millis()) / 60000) + ":" + String(((cycleEndTime - millis()) % 60000) / 1000);
    sendEvent("timeRemaining", timeRemainingString);
    sendEvent("currentZone", String(currentZone));
  }

  if (isCycling) {
    if (millis() >= cycleEndTime) {
      endCurrentZone();
      currentZone++;
      if (currentZone > NUMBER_OF_ZONES) {
        isCycling = false;
        currentZone = 0;
      } else {
        startZone(currentZone);
        cycleEndTime = millis() + (duration * 60 * 1000);
      }
    }
  }
}



