const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html>
<head>
  <title>Irrigation</title>  
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="/favicon.ico" type="image/x-icon">
  <style>
    html {font-family: Arial; display: inline-block; text-align: center; color: white;}
    h2 {font-size: 3.0rem; text-align: center;}
    h3 {font-size: 2.0rem;}
    p {font-size: 1.0rem;}
    body {max-width: 600px; margin:0px auto; padding-bottom: 25px; text-align: left; padding-left: 25px; background-color: #000;}
    .switch {position: relative; display: inline-block; width: 120px; height: 68px} 
    .switch input {display: none}
    .slider {position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: #fff; border-radius: 34px}
    .slider:before {position: absolute; content: ""; height: 52px; width: 52px; left: 8px; bottom: 8px; background-color: #666; -webkit-transition: .4s; transition: .4s; border-radius: 68px}
    input:checked+.slider {background-color: #2196F3}
    input:checked+.slider:before {-webkit-transform: translateX(52px); -ms-transform: translateX(52px); transform: translateX(52px)}
    a:link, a:visited {color: blue;}
  </style>
</head>
<body>
  <h3>Irrigation Web Server</h3>
  <br>
  Schedule runs for <input type="number" id="duration" step="1" min="1" max="360" style="width: 40px;"> minutes<br>
  at <input type="time" id="startTime" style="width: 90px;"><br>
  <label for="days">Select days to run schedule:</label>
  <select name="days" id="days" multiple>
  <option value="0">Sunday</option>
  <option value="1">Monday</option>
  <option value="2">Tuesday</option>
  <option value="3">Wednesday</option>
  <option value="4">Thursday</option>
  <option value="5">Friday</option>
  <option value="6">Saturday</option>
  </select><br>
  <button id="saveButton" onclick="onSaveButtonClick()">Save Settings</button>
  <br>
  <a href="/update">Update</a>
  
 <h3>Schedule On/Off</h3>
<label class="switch">
  <input type="checkbox" onchange="toggleSchedule(this)" id="schedule" %SCHEDULESTATE%>
  <span class="slider"></span>
</label>
<p id="scheduleStateText"></p>

%BUTTONPLACEHOLDER% <br>
<br>
Last Updated: %UPLOADTIME%


<script>
function toggleCheckbox(element) {
  var xhr = new XMLHttpRequest();
  if(element.checked){ xhr.open("GET", "/updates?relay="+element.id+"&state=1", true); }
  else { xhr.open("GET", "/updates?relay="+element.id+"&state=0", true); }
  xhr.send();
}

function onSaveButtonClick() {
  const scheduleEnabled = document.getElementById("scheduleSlider").checked;
  const startTime = document.getElementById("startTime").value;
  const duration = document.getElementById("duration").value;
  const days = getSelectedDays().join(",");
  applyScheduleSettings(scheduleEnabled, startTime, duration, days);
}


function loadSavedValues() {
  const xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      const response = JSON.parse(this.responseText);
      document.getElementById("scheduleSlider").checked = response.enabled;
      document.getElementById("startTime").value = response.startTime;
      document.getElementById("duration").value = response.duration;

      const days = response.days.split(",").map(Number);
      const daysSelect = document.getElementById("days");
      for (const option of daysSelect.options) {
        option.selected = days.includes(Number(option.value));
      }
    }
  };
  // Send the request to fetch the saved values from your Arduino
  xhttp.open("GET", "/getSavedValues", true);
  xhttp.send();
}

function toggleSchedule(element) {
  var xhr = new XMLHttpRequest();
  var requestedState = element.checked ? "1" : "0";
  
  if (requestedState == "1") {
    var duration = document.getElementById("duration").value;
    var startTime = document.getElementById("startTime").value;
    var days = getSelectedDays().join(",");
    console.log("Duration:", duration, "minutes, Start time:", startTime, "Days:", days);
    
    xhr.open("GET", "/schedule?state=" + requestedState + "&duration=" + duration + "&startTime=" + startTime + "&days=" + days, true);
  } else {
    xhr.open("GET", "/schedule?state=" + requestedState, true);
  }

  xhr.onreadystatechange = function() {
    if (xhr.readyState == 4 && xhr.status == 200) {
      if (xhr.responseText != "OK") {
        console.error("Error saving settings:", xhr.responseText);
      }
    }
  };
  xhr.send();
  setTimeout(requestScheduleState, 100);
}

function updateScheduleState(scheduleState) {
  document.getElementById("schedule").checked = scheduleState;
  document.getElementById("scheduleStateText").innerHTML = scheduleState ? "Schedule on" : "Schedule Off";
}

function getSelectedDays() {
  var daysSelect = document.getElementById("days");
  var selectedDays = [];
  for (var i = 0; i < daysSelect.length; i++) {
    if (daysSelect.options[i].selected) {
      selectedDays.push(daysSelect.options[i].value);
    }
  }
  return selectedDays;
}

function requestScheduleState() {
  var xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (xhr.readyState == 4 && xhr.status == 200) {
      console.log("Schedule state response:", xhr.responseText);
      var scheduleState = xhr.responseText == "1";
      console.log("Parsed schedule state:", scheduleState);
      updateScheduleState(scheduleState);
    }
  }
  xhr.open("GET", "/getScheduleState", true);
  xhr.send();
}

function saveSettings() {
  const duration = document.getElementById('duration').value;
  const startTime = document.getElementById('startTime').value;
  const days = Array.from(document.getElementById('days').selectedOptions).map(option => option.value);

  const queryParams = new URLSearchParams({
    duration: duration,
    startTime: startTime,
    days: days.join(',')
  });

  fetch('/save-settings?' + queryParams.toString())
    .then(response => response.text())
    .then(data => {
      // Handle the response data here
      console.log("Save settings response:", data);
      alert("Settings saved");
    })
    .catch(error => {
      console.error("Error saving settings:", error);
    });
}

function onScheduleSliderChange() {
  const scheduleEnabled = document.getElementById("scheduleSlider").checked;
  const startTime = document.getElementById("startTime").value;
  const duration = document.getElementById("duration").value;
  const daysArray = [];
  for (let i = 1; i <= 7; i++) {
    const dayCheckbox = document.getElementById(`day${i}`);
    if (dayCheckbox.checked) {
      daysArray.push(i);
    }
  }
  const days = daysArray.join(",");

  applyScheduleSettings(scheduleEnabled, startTime, duration, days);
}

function applyScheduleSettings(scheduleEnabled, startTime, duration, days) {
  const xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      if (this.responseText !== "OK") {
        console.error("Error saving settings:", this.responseText);
        console.log("Request URL:", this.responseURL);
        console.log("Request status:", this.status);
        console.log("Request response text:", this.responseText);
      }
    }
  };

  // Prepare the URL with the values as query parameters
  const url = `/schedule?enabled=${scheduleEnabled}&startTime=${startTime}&duration=${duration}&days=${days}`;

  // Send the request
  xhttp.open("GET", url, true);
  xhttp.send();
}

document.addEventListener('DOMContentLoaded', function() {
  setTimeout(requestScheduleState, 500);
  loadSavedValues();
});  
</script>
  


</body>
</html>
)rawliteral";

// Replaces placeholder with button section in your web page
String processor(const String& var) {
  //Serial.println(var);
  if (var == "BUTTONPLACEHOLDER") {
    String buttons = "";
    for (int i = 1; i <= NUM_RELAYS; i++) {
      String relayStateValue = relayState(i);
      buttons += "<h4>Zone #" + String(i) + "</h4><label class=\"switch\"><input type=\"checkbox\" onchange=\"toggleCheckbox(this)\" id=\"" + String(i) + "\" " + relayStateValue + "><span class=\"slider\"></span></label>";
    }
    return buttons;
  }
  return String();
}

String relayState(int numRelay) {
  if (RELAY_NO) {
    if (digitalRead(relayGPIOs[numRelay - 1])) {
      return "";
    } else {
      return "checked";
    }
  } else {
    if (digitalRead(relayGPIOs[numRelay - 1])) {
      return "checked";
    } else {
      return "";
    }
  }
  return "";
}

void saveDuration(int duration) {
  EEPROM.put(EEPROM_DURATION_ADDR, duration);
  EEPROM.commit();
}

int loadDuration() {
  int duration;
  EEPROM.get(EEPROM_DURATION_ADDR, duration);
  return duration;
}

void saveStartTime(String startTime) {
  for (int i = 0; i < startTime.length(); i++) {
    EEPROM.write(EEPROM_STARTTIME_ADDR + i, startTime[i]);
  }
  EEPROM.write(EEPROM_STARTTIME_ADDR + startTime.length(), '\0');
  EEPROM.commit();
}

String loadStartTime() {
  String startTime = "";
  for (int i = 0; i < 8; i++) {  // HH:MM:SS format has 8 characters
    char c = EEPROM.read(EEPROM_STARTTIME_ADDR + i);
    if (c == '\0') break;
    startTime += c;
  }
  return startTime;
}

void saveDays(String days) {
  for (int i = 0; i < days.length(); i++) {
    EEPROM.write(EEPROM_DAYS_ADDR + i, days[i]);
  }
  EEPROM.write(EEPROM_DAYS_ADDR + days.length(), '\0');
  EEPROM.commit();
}

String loadDays() {
  String days = "";
  for (int i = 0; i < 14; i++) {  // Max 14 characters in "0,1,2,3,4,5,6"
    char c = EEPROM.read(EEPROM_DAYS_ADDR + i);
    if (c == '\0') break;
    days += c;
  }
  return days;
}


void saveScheduleState(bool state) {
  EEPROM.write(EEPROM_SCHEDULE_STATE_ADDR, state);
  EEPROM.commit();
}

bool loadScheduleState() {
  return EEPROM.read(EEPROM_SCHEDULE_STATE_ADDR);
}


void setup() {
  // Serial port for debugging purposes
  Serial.begin(115200);

  EEPROM.begin(512);
  scheduleEnabled = loadScheduleState();
  duration = loadDuration();
  startTime = loadStartTime();
  daysArray = loadDays();

  pinMode(relayAlarm1, OUTPUT);
  pinMode(relayAlarm2, OUTPUT);
  pinMode(relayAlarm3, OUTPUT);
  pinMode(relayAlarm4, OUTPUT);

  digitalWrite(relayAlarm1, HIGH);
  digitalWrite(relayAlarm2, HIGH);
  digitalWrite(relayAlarm3, HIGH);
  digitalWrite(relayAlarm4, HIGH);

  UpdateNTP();

  runSchedule();

  Serial.println("Setting Alarms...");

  Alarm.alarmRepeat(0, 0, 1, UpdateNTP);

  time_t prevDisplay = 0;


  // Set all relays to off when the program starts - if set to Normally Open (NO), the relay is off when you set the relay to HIGH
  for (int i = 1; i <= NUM_RELAYS; i++) {
    pinMode(relayGPIOs[i - 1], OUTPUT);
    if (RELAY_NO) {
      digitalWrite(relayGPIOs[i - 1], HIGH);
    } else {
      digitalWrite(relayGPIOs[i - 1], LOW);
    }
  }

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  // Print ESP32 Local IP Address
  Serial.println(WiFi.localIP());

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest* request) {
    request->send_P(200, "text/html", index_html, processor);
  });

  //Send a GET request to <ESP_IP>/update?relay=<inputMessage>&state=<inputMessage2>
  server.on("/updates", HTTP_GET, [](AsyncWebServerRequest* request) {
    String inputMessage;
    String inputParam;
    String inputMessage2;
    String inputParam2;

    //GET input1 value on <ESP_IP>/update?relay=<inputMessage>
    if (request->hasParam(PARAM_INPUT_1) & request->hasParam(PARAM_INPUT_2)) {
      inputMessage = request->getParam(PARAM_INPUT_1)->value();
      inputParam = PARAM_INPUT_1;
      inputMessage2 = request->getParam(PARAM_INPUT_2)->value();
      inputParam2 = PARAM_INPUT_2;
      if (RELAY_NO) {
        Serial.print("NO ");
        digitalWrite(relayGPIOs[inputMessage.toInt() - 1], !inputMessage2.toInt());

      } else {
        Serial.print("NC ");
        digitalWrite(relayGPIOs[inputMessage.toInt() - 1], inputMessage2.toInt());
      }
    } else {
      inputMessage = "No message sent";
      inputParam = "none";
    }
    Serial.println(inputMessage + inputMessage2);
    request->send(200, "text/plain", "OK");
  });

  //Checks the scheduleEnabled state, then gets the time, durateion and days for the schedule
  server.on("/schedule", HTTP_GET, [&](AsyncWebServerRequest* request) {
    String inputMessage;

    if (request->hasParam("state")) {
      String state = request->getParam("state")->value();
      scheduleEnabled = (state == "1");
      saveScheduleState(scheduleEnabled);
    }

    if (request->hasParam(PARAM_DURATION)) {
      int duration = request->getParam(PARAM_DURATION)->value().toInt();
      saveDuration(duration);
    }

    if (request->hasParam(PARAM_START_TIME)) {
      startTime = request->getParam(PARAM_START_TIME)->value();
      saveStartTime(startTime);
    }

    if (request->hasParam(PARAM_DAYS)) {
      daysArray = request->getParam(PARAM_DAYS)->value();
      saveDays(daysArray);
    }

    if (scheduleEnabled) {
      runSchedule();
    } else {
      for (int i = 0; i < dtNBR_ALARMS; i++) {
        Alarm.disable(i);
      }
    }
    request->send(200, "text/plain", scheduleEnabled ? "1" : "0");
  });

  server.on("/getSavedValues", HTTP_GET, [](AsyncWebServerRequest* request) {
    String json = "{";
    json += "\"duration\":" + String(loadDuration()) + ",";
    json += "\"startTime\":\"" + loadStartTime() + "\",";
    json += "\"days\":\"" + loadDays() + "\"";
    json += "}";
    request->send(200, "application/json", json);
  });

  server.on("/getScheduleState", HTTP_GET, [](AsyncWebServerRequest* request) {
    bool scheduleState = loadScheduleState();
    request->send(200, "text/plain", scheduleState ? "1" : "0");
  });

  server.on("/save-settings", HTTP_GET, [](AsyncWebServerRequest* request) {
  if (request->hasParam(PARAM_DURATION)) {
    int duration = request->getParam(PARAM_DURATION)->value().toInt();
    saveDuration(duration);
  }

  if (request->hasParam(PARAM_START_TIME)) {
    String startTime = request->getParam(PARAM_START_TIME)->value();
    saveStartTime(startTime);
  }

  if (request->hasParam(PARAM_DAYS)) {
    String daysArray = request->getParam(PARAM_DAYS)->value();
    saveDays(daysArray);
  }

  request->send(200, "text/plain", "OK");
});



  AsyncElegantOTA.begin(&server);
  server.begin();
}

